{"version":3,"sources":["GlobalStyles.tsx","libs/apollo.ts","components/Layout.tsx","graphql/generated.ts","components/Button.tsx","components/Loading.tsx","components/Side.tsx","components/Link.tsx","components/Fragment/styles.tsx","contexts/fragment.tsx","components/Editor/constant.ts","components/Editor/context.ts","components/InlineEditor.tsx","components/Editor/decorators/BlockElement.tsx","components/Editor/decorators/Code.tsx","hooks/useKeyPress.ts","components/Preview.tsx","components/Editor/decorators/Handle.tsx","components/Editor/decorators/Tag.tsx","components/Editor/decorators/Leaf.tsx","components/Editor/styles.tsx","components/Editor/utils.ts","components/Editor/index.tsx","components/Fragment/index.tsx","components/Fragment/hooks.tsx","pages/FragmentPage.tsx","components/NewFragment.tsx","pages/Feed.tsx","pages/Home.tsx","pages/TagPage.tsx","MainRouter.tsx","App.tsx","index.tsx"],"names":["GlobalStyles","styles","css","httpLink","createHttpLink","uri","process","Expander","styled","div","Main","Body","Container","Flex","p","marginTop","mt","marginBottom","mb","marginRight","mr","marginLeft","ml","height","h","width","w","justifyContent","justify","alignItems","align","display","position","flexDirection","col","DeleteFragmentDocument","gql","useDeleteFragmentMutation","baseOptions","Apollo","GetFragmentByHandleDocument","useGetFragmentByHandleQuery","GetFragmentsDocument","useGetFragmentsQuery","GetFragmentsPreviewDocument","GetTagsDocument","useGetTagsQuery","SaveFragmentDocument","useSaveFragmentMutation","Button","Loading","SideStyled","isVisible","Inside","FixLink","span","Title","SearchInput","input","Side","useState","setIsVisbile","search","setSearch","tagQuery","tags","data","sort","useDebounce","debouncedSearch","skip","variables","filter","content","handle","fragmentsFoundResponse","loading","fragmentsFound","useMemo","fragments","useEffect","refetch","handleToggleShow","useCallback","style","onClick","to","size","placeholder","value","onChange","e","target","right","top","map","tag","frament","Link","Info","HideOut","FragmentStyled","HandleInput","AutosizeInput","BackLinksLine","FragmentContext","createContext","undefined","FragmentProvider","Provider","SHORTCUTS","LEAF_REGEX","initialState","ForbidenHandlesContext","ForbidenHandlesProvider","useForbidenHandlesContext","useContext","InlineEditor","fetchPolicy","fragment","fragmentByHandle","save","initialValue","onSave","uuid","autoSave","BlockElement","attributes","children","element","forbidenHandles","type","opacity","backgroundColor","color","padding","margin","includes","contentEditable","className","Code","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","PreviewStyled","PreviewContainer","Preview","hide","previewContent","HandleStyled","exists","inline","showAsLink","Handle","leafText","text","props","navigate","useNavigate","slice","handlePreview","linksTo","find","l","ctrlPress","metaPress","ctrlKey","metaKey","TagStyled","Tag","Leaf","leaf","fontWeight","fontStyle","EditorStyled","decorate","node","path","ranges","Text","isText","Object","keys","forEach","k","match","re","RegExp","exec","start","index","end","length","push","anchor","offset","focus","deserialize","editorState","n","preventSerialization","Node","string","join","Editor","onChangeParent","autoFocus","spellCheck","onBlur","editorRef","useRef","current","split","setEditorState","selectionState","setSelectionState","editor","withReact","isVoid","withNestedEditor","normalizeNode","entry","withNormalize","createEditor","debouncedSave","useDebouncedCallback","a","_value","createDraft","_selection","selection","lastCodeFenceIndex","i","short","splice","replace","editorContent","finishDraft","editorSelection","callback","Transforms","setSelection","ref","renderElement","renderLeaf","Fragment","onDelete","isDirty","setIsDirty","useSpellCheck","setUseSpellCheck","c","setC","setW","getHumanId","separator","capitalize","setHandle","setUuid","setContent","count","saveFragment","result","newUuid","onContentChange","newContent","hasBackLinks","linkedBy","onHandleChange","goToHandlePage","currentTarget","useLogic","format","createdAt","Date","link","FragmentPage","useParams","deleteFragment","showLoader","NewBlock","NewFragment","onOutsideClick","isEditing","setIsEditing","Feed","fragmentQuery","starFragmentQuery","starFragments","f","st","Home","TagPage","tagsQuery","subTags","t","startsWith","fontSize","MainRouter","useAuth0","loginWithRedirect","isLoading","isAuthenticated","humanId","AuthorizedApp","client","getAccessTokenSilently","authLink","setContext","_","headers","token","authorization","ApolloClient","concat","cache","InMemoryCache","typePolicies","keyFields","fields","read","User","useInitializeApolloClient","App","domain","clientId","redirectUri","location","origin","audience","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcdab99f.chunk.js","sourcesContent":["import { css, Global } from \"@emotion/react\";\nimport React from \"react\";\n\nexport const GlobalStyles = () => (\n  <Global\n    styles={css`\n      @import url(\"https://fonts.googleapis.com/css2?family=Inconsolata:wght@200;300;400;500;600;700&display=swap\");\n\n      /* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\n      html,\n      body,\n      div,\n      span,\n      applet,\n      object,\n      iframe,\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6,\n      p,\n      blockquote,\n      pre,\n      a,\n      abbr,\n      acronym,\n      address,\n      big,\n      cite,\n      code,\n      del,\n      dfn,\n      em,\n      img,\n      ins,\n      kbd,\n      q,\n      s,\n      samp,\n      small,\n      strike,\n      strong,\n      sub,\n      sup,\n      tt,\n      var,\n      b,\n      u,\n      i,\n      center,\n      dl,\n      dt,\n      dd,\n      ol,\n      ul,\n      li,\n      fieldset,\n      form,\n      label,\n      legend,\n      table,\n      caption,\n      tbody,\n      tfoot,\n      thead,\n      tr,\n      th,\n      td,\n      article,\n      aside,\n      canvas,\n      details,\n      embed,\n      figure,\n      figcaption,\n      footer,\n      header,\n      hgroup,\n      menu,\n      nav,\n      output,\n      ruby,\n      section,\n      summary,\n      time,\n      mark,\n      audio,\n      video {\n        margin: 0;\n        padding: 0;\n        border: 0;\n        font-size: 100%;\n        font: inherit;\n        vertical-align: baseline;\n      }\n      /* HTML5 display-role reset for older browsers */\n      article,\n      aside,\n      details,\n      figcaption,\n      figure,\n      footer,\n      header,\n      hgroup,\n      menu,\n      nav,\n      section {\n        display: block;\n      }\n      body {\n        line-height: 1;\n      }\n      ol,\n      ul {\n        list-style: none;\n      }\n      blockquote,\n      q {\n        quotes: none;\n      }\n      blockquote:before,\n      blockquote:after,\n      q:before,\n      q:after {\n        content: \"\";\n        content: none;\n      }\n      table {\n        border-collapse: collapse;\n        border-spacing: 0;\n      }\n\n      *,\n      body,\n      input,\n      textarea {\n        font-family: \"Inconsolata\", monospace;\n      }\n\n      body {\n        min-height: 100vh;\n        display: flex;\n        a {\n          text-decoration: none;\n          color: inherit;\n        }\n        #root {\n          width: 100%;\n        }\n      }\n    `}\n  />\n);\n","import { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_API_URL,\n});\n\nexport const useInitializeApolloClient = (\n  getAccessTokenSilently: () => any\n) => {\n  const authLink = setContext(async (_, { headers }) => {\n    const token = await getAccessTokenSilently();\n    return {\n      headers: {\n        ...headers,\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    };\n  });\n\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Fragment: {\n          keyFields: [\"uuid\"],\n          fields: {\n            createdAt: {\n              read(createdAt) {\n                return new Date(createdAt);\n              },\n            },\n          },\n        },\n        User: { keyFields: [\"email\"] },\n      },\n    }),\n  });\n\n  return { client };\n};\n","import styled from \"@emotion/styled\";\n\nexport const Expander = styled.div`\n  flex: 1;\n`;\n\nexport const Main = styled.div`\n  flex: 1;\n  min-height: 100%;\n  display: flex;\n  justify-content: center;\n  background-color: #eee;\n`;\n\nexport const Body = styled.div`\n  flex: 1;\n  justify-content: center;\n  display: flex;\n`;\n\nexport const Container = styled.div`\n  width: 1000px;\n  padding-top: 100px;\n`;\n\nexport const Flex = styled.div<{\n  mt?: number;\n  mr?: number;\n  mb?: number;\n  ml?: number;\n\n  h?: number | string;\n  w?: number | string;\n\n  justify?: \"center\" | \"flex-start\" | \"flex-end\";\n  align?: \"center\" | \"flex-start\" | \"flex-end\";\n\n  col?: boolean;\n}>((p) => ({\n  marginTop: p.mt,\n  marginBottom: p.mb,\n  marginRight: p.mr,\n  marginLeft: p.ml,\n\n  height: p.h,\n  width: p.w,\n\n  justifyContent: p.justify,\n  alignItems: p.align,\n\n  display: \"flex\",\n  position: \"relative\",\n  flexDirection: p.col ? \"column\" : \"row\",\n}));\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */\n  DateTime: any;\n};\n\n\nexport type Fragment = {\n  __typename?: 'Fragment';\n  uuid?: Maybe<Scalars['ID']>;\n  handle: Scalars['String'];\n  content: Scalars['String'];\n  previewContent: Scalars['String'];\n  linksTo: Array<Fragment>;\n  linkedBy: Array<Fragment>;\n  tags: Array<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type FragmentInput = {\n  uuid?: Maybe<Scalars['ID']>;\n  handle?: Maybe<Scalars['String']>;\n  content?: Maybe<Scalars['String']>;\n};\n\nexport type SearchFragmentInput = {\n  tags?: Maybe<Scalars['String']>;\n  handle?: Maybe<Scalars['String']>;\n  content?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  fragmentByHandle?: Maybe<Fragment>;\n  fragments: Array<Fragment>;\n  tags: Array<Scalars['String']>;\n  me?: Maybe<User>;\n};\n\n\nexport type QueryFragmentByHandleArgs = {\n  handle: Scalars['String'];\n};\n\n\nexport type QueryFragmentsArgs = {\n  filter?: Maybe<SearchFragmentInput>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  saveFragment?: Maybe<Fragment>;\n  deleteFragment: Scalars['Boolean'];\n};\n\n\nexport type MutationSaveFragmentArgs = {\n  fragment: FragmentInput;\n};\n\n\nexport type MutationDeleteFragmentArgs = {\n  uuid: Scalars['ID'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type DeleteFragmentMutationVariables = Exact<{\n  uuid: Scalars['ID'];\n}>;\n\n\nexport type DeleteFragmentMutation = (\n  { __typename?: 'Mutation' }\n  & { done: Mutation['deleteFragment'] }\n);\n\nexport type GetFragmentsHandleQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetFragmentsHandleQuery = (\n  { __typename?: 'Query' }\n  & { fragments: Array<(\n    { __typename?: 'Fragment' }\n    & Pick<Fragment, 'uuid' | 'handle' | 'previewContent'>\n  )> }\n);\n\nexport type GetFragmentByHandleQueryVariables = Exact<{\n  handle: Scalars['String'];\n}>;\n\n\nexport type GetFragmentByHandleQuery = (\n  { __typename?: 'Query' }\n  & { fragmentByHandle?: Maybe<(\n    { __typename?: 'Fragment' }\n    & Pick<Fragment, 'uuid' | 'handle' | 'content' | 'createdAt' | 'tags'>\n    & { linkedBy: Array<(\n      { __typename?: 'Fragment' }\n      & Pick<Fragment, 'uuid' | 'handle' | 'previewContent'>\n    )>, linksTo: Array<(\n      { __typename?: 'Fragment' }\n      & Pick<Fragment, 'handle' | 'uuid' | 'previewContent'>\n    )> }\n  )> }\n);\n\nexport type GetFragmentsQueryVariables = Exact<{\n  filter?: Maybe<SearchFragmentInput>;\n}>;\n\n\nexport type GetFragmentsQuery = (\n  { __typename?: 'Query' }\n  & { fragments: Array<(\n    { __typename?: 'Fragment' }\n    & Pick<Fragment, 'uuid' | 'handle' | 'content' | 'createdAt' | 'tags'>\n    & { linkedBy: Array<(\n      { __typename?: 'Fragment' }\n      & Pick<Fragment, 'uuid' | 'handle' | 'previewContent'>\n    )>, linksTo: Array<(\n      { __typename?: 'Fragment' }\n      & Pick<Fragment, 'handle' | 'uuid' | 'previewContent'>\n    )> }\n  )> }\n);\n\nexport type GetFragmentsPreviewQueryVariables = Exact<{\n  filter?: Maybe<SearchFragmentInput>;\n}>;\n\n\nexport type GetFragmentsPreviewQuery = (\n  { __typename?: 'Query' }\n  & { fragments: Array<(\n    { __typename?: 'Fragment' }\n    & Pick<Fragment, 'uuid' | 'handle' | 'previewContent'>\n  )> }\n);\n\nexport type GetTagsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetTagsQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'tags'>\n);\n\nexport type SaveFragmentMutationVariables = Exact<{\n  fragment: FragmentInput;\n}>;\n\n\nexport type SaveFragmentMutation = (\n  { __typename?: 'Mutation' }\n  & { fragment?: Maybe<(\n    { __typename?: 'Fragment' }\n    & Pick<Fragment, 'uuid' | 'content' | 'handle'>\n  )> }\n);\n\n\nexport const DeleteFragmentDocument = gql`\n    mutation deleteFragment($uuid: ID!) {\n  done: deleteFragment(uuid: $uuid)\n}\n    `;\nexport type DeleteFragmentMutationFn = Apollo.MutationFunction<DeleteFragmentMutation, DeleteFragmentMutationVariables>;\n\n/**\n * __useDeleteFragmentMutation__\n *\n * To run a mutation, you first call `useDeleteFragmentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteFragmentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteFragmentMutation, { data, loading, error }] = useDeleteFragmentMutation({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useDeleteFragmentMutation(baseOptions?: Apollo.MutationHookOptions<DeleteFragmentMutation, DeleteFragmentMutationVariables>) {\n        return Apollo.useMutation<DeleteFragmentMutation, DeleteFragmentMutationVariables>(DeleteFragmentDocument, baseOptions);\n      }\nexport type DeleteFragmentMutationHookResult = ReturnType<typeof useDeleteFragmentMutation>;\nexport type DeleteFragmentMutationResult = Apollo.MutationResult<DeleteFragmentMutation>;\nexport type DeleteFragmentMutationOptions = Apollo.BaseMutationOptions<DeleteFragmentMutation, DeleteFragmentMutationVariables>;\nexport const GetFragmentsHandleDocument = gql`\n    query getFragmentsHandle {\n  fragments {\n    uuid\n    handle\n    previewContent\n  }\n}\n    `;\n\n/**\n * __useGetFragmentsHandleQuery__\n *\n * To run a query within a React component, call `useGetFragmentsHandleQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetFragmentsHandleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetFragmentsHandleQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetFragmentsHandleQuery(baseOptions?: Apollo.QueryHookOptions<GetFragmentsHandleQuery, GetFragmentsHandleQueryVariables>) {\n        return Apollo.useQuery<GetFragmentsHandleQuery, GetFragmentsHandleQueryVariables>(GetFragmentsHandleDocument, baseOptions);\n      }\nexport function useGetFragmentsHandleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFragmentsHandleQuery, GetFragmentsHandleQueryVariables>) {\n          return Apollo.useLazyQuery<GetFragmentsHandleQuery, GetFragmentsHandleQueryVariables>(GetFragmentsHandleDocument, baseOptions);\n        }\nexport type GetFragmentsHandleQueryHookResult = ReturnType<typeof useGetFragmentsHandleQuery>;\nexport type GetFragmentsHandleLazyQueryHookResult = ReturnType<typeof useGetFragmentsHandleLazyQuery>;\nexport type GetFragmentsHandleQueryResult = Apollo.QueryResult<GetFragmentsHandleQuery, GetFragmentsHandleQueryVariables>;\nexport const GetFragmentByHandleDocument = gql`\n    query getFragmentByHandle($handle: String!) {\n  fragmentByHandle(handle: $handle) {\n    uuid\n    handle\n    content\n    createdAt\n    tags\n    linkedBy {\n      uuid\n      handle\n      previewContent\n    }\n    linksTo {\n      handle\n      uuid\n      previewContent\n    }\n  }\n}\n    `;\n\n/**\n * __useGetFragmentByHandleQuery__\n *\n * To run a query within a React component, call `useGetFragmentByHandleQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetFragmentByHandleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetFragmentByHandleQuery({\n *   variables: {\n *      handle: // value for 'handle'\n *   },\n * });\n */\nexport function useGetFragmentByHandleQuery(baseOptions?: Apollo.QueryHookOptions<GetFragmentByHandleQuery, GetFragmentByHandleQueryVariables>) {\n        return Apollo.useQuery<GetFragmentByHandleQuery, GetFragmentByHandleQueryVariables>(GetFragmentByHandleDocument, baseOptions);\n      }\nexport function useGetFragmentByHandleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFragmentByHandleQuery, GetFragmentByHandleQueryVariables>) {\n          return Apollo.useLazyQuery<GetFragmentByHandleQuery, GetFragmentByHandleQueryVariables>(GetFragmentByHandleDocument, baseOptions);\n        }\nexport type GetFragmentByHandleQueryHookResult = ReturnType<typeof useGetFragmentByHandleQuery>;\nexport type GetFragmentByHandleLazyQueryHookResult = ReturnType<typeof useGetFragmentByHandleLazyQuery>;\nexport type GetFragmentByHandleQueryResult = Apollo.QueryResult<GetFragmentByHandleQuery, GetFragmentByHandleQueryVariables>;\nexport const GetFragmentsDocument = gql`\n    query getFragments($filter: SearchFragmentInput) {\n  fragments(filter: $filter) {\n    uuid\n    handle\n    content\n    createdAt\n    tags\n    linkedBy {\n      uuid\n      handle\n      previewContent\n    }\n    linksTo {\n      handle\n      uuid\n      previewContent\n    }\n  }\n}\n    `;\n\n/**\n * __useGetFragmentsQuery__\n *\n * To run a query within a React component, call `useGetFragmentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetFragmentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetFragmentsQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useGetFragmentsQuery(baseOptions?: Apollo.QueryHookOptions<GetFragmentsQuery, GetFragmentsQueryVariables>) {\n        return Apollo.useQuery<GetFragmentsQuery, GetFragmentsQueryVariables>(GetFragmentsDocument, baseOptions);\n      }\nexport function useGetFragmentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFragmentsQuery, GetFragmentsQueryVariables>) {\n          return Apollo.useLazyQuery<GetFragmentsQuery, GetFragmentsQueryVariables>(GetFragmentsDocument, baseOptions);\n        }\nexport type GetFragmentsQueryHookResult = ReturnType<typeof useGetFragmentsQuery>;\nexport type GetFragmentsLazyQueryHookResult = ReturnType<typeof useGetFragmentsLazyQuery>;\nexport type GetFragmentsQueryResult = Apollo.QueryResult<GetFragmentsQuery, GetFragmentsQueryVariables>;\nexport const GetFragmentsPreviewDocument = gql`\n    query getFragmentsPreview($filter: SearchFragmentInput) {\n  fragments(filter: $filter) {\n    uuid\n    handle\n    previewContent\n  }\n}\n    `;\n\n/**\n * __useGetFragmentsPreviewQuery__\n *\n * To run a query within a React component, call `useGetFragmentsPreviewQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetFragmentsPreviewQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetFragmentsPreviewQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useGetFragmentsPreviewQuery(baseOptions?: Apollo.QueryHookOptions<GetFragmentsPreviewQuery, GetFragmentsPreviewQueryVariables>) {\n        return Apollo.useQuery<GetFragmentsPreviewQuery, GetFragmentsPreviewQueryVariables>(GetFragmentsPreviewDocument, baseOptions);\n      }\nexport function useGetFragmentsPreviewLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetFragmentsPreviewQuery, GetFragmentsPreviewQueryVariables>) {\n          return Apollo.useLazyQuery<GetFragmentsPreviewQuery, GetFragmentsPreviewQueryVariables>(GetFragmentsPreviewDocument, baseOptions);\n        }\nexport type GetFragmentsPreviewQueryHookResult = ReturnType<typeof useGetFragmentsPreviewQuery>;\nexport type GetFragmentsPreviewLazyQueryHookResult = ReturnType<typeof useGetFragmentsPreviewLazyQuery>;\nexport type GetFragmentsPreviewQueryResult = Apollo.QueryResult<GetFragmentsPreviewQuery, GetFragmentsPreviewQueryVariables>;\nexport const GetTagsDocument = gql`\n    query getTags {\n  tags\n}\n    `;\n\n/**\n * __useGetTagsQuery__\n *\n * To run a query within a React component, call `useGetTagsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTagsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetTagsQuery(baseOptions?: Apollo.QueryHookOptions<GetTagsQuery, GetTagsQueryVariables>) {\n        return Apollo.useQuery<GetTagsQuery, GetTagsQueryVariables>(GetTagsDocument, baseOptions);\n      }\nexport function useGetTagsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetTagsQuery, GetTagsQueryVariables>) {\n          return Apollo.useLazyQuery<GetTagsQuery, GetTagsQueryVariables>(GetTagsDocument, baseOptions);\n        }\nexport type GetTagsQueryHookResult = ReturnType<typeof useGetTagsQuery>;\nexport type GetTagsLazyQueryHookResult = ReturnType<typeof useGetTagsLazyQuery>;\nexport type GetTagsQueryResult = Apollo.QueryResult<GetTagsQuery, GetTagsQueryVariables>;\nexport const SaveFragmentDocument = gql`\n    mutation saveFragment($fragment: FragmentInput!) {\n  fragment: saveFragment(fragment: $fragment) {\n    uuid\n    content\n    handle\n  }\n}\n    `;\nexport type SaveFragmentMutationFn = Apollo.MutationFunction<SaveFragmentMutation, SaveFragmentMutationVariables>;\n\n/**\n * __useSaveFragmentMutation__\n *\n * To run a mutation, you first call `useSaveFragmentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveFragmentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveFragmentMutation, { data, loading, error }] = useSaveFragmentMutation({\n *   variables: {\n *      fragment: // value for 'fragment'\n *   },\n * });\n */\nexport function useSaveFragmentMutation(baseOptions?: Apollo.MutationHookOptions<SaveFragmentMutation, SaveFragmentMutationVariables>) {\n        return Apollo.useMutation<SaveFragmentMutation, SaveFragmentMutationVariables>(SaveFragmentDocument, baseOptions);\n      }\nexport type SaveFragmentMutationHookResult = ReturnType<typeof useSaveFragmentMutation>;\nexport type SaveFragmentMutationResult = Apollo.MutationResult<SaveFragmentMutation>;\nexport type SaveFragmentMutationOptions = Apollo.BaseMutationOptions<SaveFragmentMutation, SaveFragmentMutationVariables>;","import styled from \"@emotion/styled\";\nimport { Flex } from \"./Layout\";\n\nexport const Button = styled(Flex)`\n  padding: 10px 15px;\n  border-radius: 5px;\n  font-size: 20px;\n  background-color: #d9d9d9;\n  color: #4d4d4d;\n  cursor: pointer;\n  align-items: center;\n\n  &:hover {\n    color: #d9d9d9;\n    background-color: #4d4d4d;\n  }\n\n  svg {\n    margin-right: 10px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst SPEED = 2;\nexport const Loading = styled.div`\n  /**\n * ==============================================\n * Dot Flashing\n * ==============================================\n */\n\n  position: relative;\n  width: 10px;\n  height: 10px;\n  // border-radius: 5px;\n  background-color: rgba(0, 0, 0, 0.05);\n  color: rgba(0, 0, 0, 0.05);\n  animation: dotFlashing ${SPEED}s infinite normal;\n  animation-delay: ${SPEED / 3}s;\n\n  &::before,\n  &::after {\n    content: \"\";\n    display: inline-block;\n    position: absolute;\n    top: 0;\n  }\n\n  &::before {\n    left: -15px;\n    width: 10px;\n    height: 10px;\n    //border-radius: 5px;\n    background-color: rgba(0, 0, 0, 0.05);\n    color: rgba(0, 0, 0, 0.05);\n    animation: dotFlashing ${SPEED}s infinite normal;\n    animation-delay: 0s;\n  }\n\n  &::after {\n    left: 15px;\n    width: 10px;\n    height: 10px;\n    // border-radius: 5px;\n    background-color: rgba(0, 0, 0, 0.05);\n    color: rgba(0, 0, 0, 0.05);\n    animation: dotFlashing ${SPEED}s infinite normal;\n    animation-delay: ${(SPEED / 3) * 2}s;\n  }\n\n  @keyframes dotFlashing {\n    0%,\n    50%,\n    100% {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n    80% {\n      background-color: rgba(0, 0, 0, 0.5);\n    }\n  }\n`;\n","import styled from \"@emotion/styled\";\nimport {\n  useGetFragmentsPreviewQuery,\n  useGetTagsQuery,\n} from \"graphql/generated\";\nimport React, { FC, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { HiOutlinePlus } from \"react-icons/hi\";\nimport { Link } from \"react-router-dom\";\nimport { useDebounce } from \"use-debounce/lib\";\nimport { Button } from \"./Button\";\nimport { Flex } from \"./Layout\";\nimport { Loading } from \"./Loading\";\n\nconst SIDE_WIDTH = 250;\n\nconst SideStyled = styled.div<{ isVisible?: boolean }>`\n  width: ${(p) => (p.isVisible ? SIDE_WIDTH : 0)}px;\n  box-sizing: border-box;\n  overflow: hidden;\n  color: #aaa;\n  transition: 0.5s;\n\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  font-size: 20px;\n\n  z-index: 100;\n`;\n\nconst Inside = styled.div`\n  background-color: #222;\n  width: ${SIDE_WIDTH}px;\n  padding: 20px;\n  padding-top: 50px;\n  height: 100%;\n  box-sizing: border-box;\n`;\n\nconst FixLink = styled.span`\n  position: fixed;\n  top: 10px;\n  left: 20px;\n  padding: 3px;\n  color: #aaa;\n  cursor: pointer;\n  &:hover {\n    border-bottom: 1px dashed;\n  }\n`;\n\nconst Title = styled.div`\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\nconst SearchInput = styled.input`\n  padding: 10px 20px;\n  border: none;\n  outline: none;\n  font-size: 18px;\n  width: 100%;\n  opacity: 0.5;\n  &:hover,\n  &:focus {\n    opacity: 1;\n  }\n`;\n\nexport const Side: FC = () => {\n  const [isVisible, setIsVisbile] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const tagQuery = useGetTagsQuery();\n  const tags = [...(tagQuery?.data?.tags || [])].sort();\n  const [debouncedSearch] = useDebounce(search, 1000);\n\n  const { data: fragmentsFoundResponse, loading } = useGetFragmentsPreviewQuery(\n    {\n      skip: !search,\n      variables: {\n        filter: { content: debouncedSearch, handle: debouncedSearch },\n      },\n    }\n  );\n\n  const fragmentsFound = useMemo(\n    () => fragmentsFoundResponse?.fragments || [],\n    [fragmentsFoundResponse?.fragments]\n  );\n\n  useEffect(() => {\n    if (isVisible) tagQuery?.refetch?.();\n  }, [isVisible]);\n\n  const handleToggleShow = useCallback(() => {\n    setIsVisbile(!isVisible);\n    setSearch(\"\");\n  }, [isVisible, setIsVisbile, setSearch]);\n\n  return (\n    <>\n      <SideStyled\n        isVisible={isVisible}\n        style={{ position: \"relative\" }}\n      ></SideStyled>\n\n      <SideStyled isVisible={isVisible}>\n        <Inside>\n          <FixLink onClick={handleToggleShow}>\n            {isVisible ? \"Hide\" : \"Show\"} Side\n          </FixLink>\n\n          <Link to=\"/handle/new\" style={{ marginBottom: 20 }}>\n            <Button>\n              <HiOutlinePlus size={15} /> New fragment\n            </Button>\n          </Link>\n\n          <Flex mb={20} mr={-20} ml={-20}>\n            <SearchInput\n              placeholder=\"search\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n            />\n            {loading && (\n              <Flex style={{ position: \"absolute\", right: 25, top: 15 }}>\n                <Loading />\n              </Flex>\n            )}\n          </Flex>\n\n          {!search && (\n            <>\n              <Title style={{ marginBottom: 10 }}>\n                <Link to={\"/\"}>Home</Link>\n              </Title>\n\n              <Title style={{ marginBottom: 10 }}>\n                <Link to={\"/feed\"}>Feed</Link>\n              </Title>\n\n              <Title>Tags</Title>\n              {tags?.map((tag) => (\n                <div>\n                  <Link to={\"/tag/\" + tag}>#{tag}</Link>\n                </div>\n              ))}\n            </>\n          )}\n\n          {search && (\n            <>\n              {fragmentsFound?.map((frament) => (\n                <div>\n                  <Link to={\"/handle/\" + frament.handle}>{frament.handle}</Link>\n                </div>\n              ))}\n            </>\n          )}\n        </Inside>\n      </SideStyled>\n    </>\n  );\n};\n","import styled from \"@emotion/styled\";\n\nexport const Link = styled.span`\n  cursor: pointer;\n  color: #ccc;\n  border-bottom: 1px dashed transparent;\n  &:hover {\n    color: #222;\n    border-color: #222;\n  }\n`;\n","import styled from \"@emotion/styled/macro\";\nimport { Flex } from \"components/Layout\";\nimport AutosizeInput from \"react-input-autosize\";\n\nexport const Info = styled(Flex)`\n  font-size: 20px;\n  color: #ccc;\n  display: inline-flex;\n`;\n\nexport const HideOut = styled.div``;\nexport const FragmentStyled = styled.div`\n  padding: 20px 30px;\n  background-color: white;\n  width: 100%;\n  box-sizing: border-box;\n  box-shadow: 7px 7px 0px 0px #00000008;\n  ${HideOut} {\n    opacity: 0;\n  }\n\n  &:hover ${HideOut} {\n    opacity: 1;\n  }\n`;\n\nexport const HandleInput = styled(AutosizeInput)`\n  margin-bottom: 20px;\n  padding-bottom: 5px;\n\n  & input {\n    &:hover,\n    &:focus {\n      background-color: #e2f8ff;\n      box-shadow: 0 0 0 5px #e2f8ff;\n      color: #222;\n    }\n    padding: 0;\n    color: #ccc;\n    min-width: 0;\n    border: none;\n    outline: none;\n    background-color: transparent;\n    font-family: \"Inconsolata\", monospace;\n    font-size: 20px;\n  }\n`;\n\nexport const BackLinksLine = styled(Flex)`\n  font-size: 20px;\n  color: #ccc;\n  svg {\n    margin-right: 10px;\n  }\n`;\n","import { createContext, useContext } from \"react\";\nimport { FragmentDisplayType } from \"types\";\n\nconst initialState: FragmentDisplayType | undefined = undefined;\nconst FragmentContext = createContext<FragmentDisplayType | undefined>(\n  initialState\n);\nexport const FragmentProvider = FragmentContext.Provider;\nexport const useFragmentContext = () => useContext(FragmentContext);\n","export const SHORTCUTS = {\n  \"^\\\\* \": \"list-item\",\n  \"^- \": \"list-item\",\n  \"^\\\\+ \": \"list-item\",\n\n  \"^> \": \"block-quote\",\n\n  \"^# \": \"heading-one\",\n  \"^## \": \"heading-two\",\n  \"^### \": \"heading-three\",\n\n  \"^\\\\/\\\\/ \": \"comment\",\n} as { [index: string]: string };\n\nexport const LEAF_REGEX = {\n  \"^> (.*$)\": \"quote\",\n  \"\\\\*(.*)\\\\*\": \"italic\",\n  \"\\\\*\\\\*(.*)\\\\*\\\\*\": \"bold\",\n\n  \"\\\\B(@[a-zA-Z-]+\\\\b)(?!;)\": \"handle\",\n  \"\\\\B(@[a-zA-Z-]+:inline\\\\b)(?!;)\": \"inlineHandle\",\n  \"\\\\B(#[a-zA-Z-]+\\\\b)(?!;)\": \"hashtag\",\n  \"(?!```)`(.+)`\": \"code\",\n} as { [index: string]: string };\n","import React, { createContext, FC, useReducer } from \"react\";\nimport { useContext } from \"react\";\n\nconst initialState: string[] = [];\nconst ForbidenHandlesContext = createContext(initialState);\nexport const ForbidenHandlesProvider = ForbidenHandlesContext.Provider;\nexport const useForbidenHandlesContext = () =>\n  useContext(ForbidenHandlesContext);\n","import React from \"react\";\nimport {\n  useGetFragmentByHandleQuery,\n  useSaveFragmentMutation,\n} from \"graphql/generated\";\nimport { FC, Fragment } from \"react\";\nimport { Editor } from \"./Editor\";\nimport { useState } from \"react\";\n\nexport const InlineEditor: FC<{ handle?: string }> = ({ handle = \"\" }) => {\n  const { data, loading } = useGetFragmentByHandleQuery({\n    variables: { handle },\n    fetchPolicy: \"cache-and-network\",\n  });\n  const fragment = data?.fragmentByHandle;\n  const [save] = useSaveFragmentMutation();\n\n  const onSave = (content: string) => {\n    if (loading) return;\n    save({\n      variables: {\n        fragment: { uuid: fragment?.uuid, handle, content },\n      },\n    });\n  };\n\n  return (\n    <Editor\n      key={fragment?.uuid}\n      initialValue={fragment?.content || \"\"}\n      onSave={onSave}\n      autoSave\n      handle={handle}\n    />\n  );\n};\n","import { InlineEditor } from \"components/InlineEditor\";\nimport React from \"react\";\nimport { useForbidenHandlesContext } from \"../context\";\n\nexport const BlockElement = ({ attributes, children, element }: any) => {\n  const forbidenHandles = useForbidenHandlesContext();\n\n  switch (element.type) {\n    case \"editor-pre-handle\":\n      return <div {...attributes}>{children}</div>;\n    case \"pre-code-fence\":\n      return (\n        <div {...attributes} style={{ opacity: 0.1 }}>\n          {children}\n        </div>\n      );\n    case \"code\":\n      return (\n        <div\n          {...attributes}\n          style={{\n            backgroundColor: \"#353535\",\n            color: \"#ccc\",\n            padding: \"5px 30px\",\n            margin: \"0px -30px\",\n          }}\n        >\n          {children}\n        </div>\n      );\n    case \"block-quote\":\n      return <blockquote {...attributes}>{children}</blockquote>;\n    case \"bulleted-list\":\n      return <ul {...attributes}>{children}</ul>;\n    case \"heading-one\":\n      return <h1 {...attributes}>{children}</h1>;\n    case \"heading-two\":\n      return <h2 {...attributes}>{children}</h2>;\n    case \"heading-three\":\n      return <h3 {...attributes}>{children}</h3>;\n    case \"list-item\":\n      return <li {...attributes}>{children}</li>;\n    case \"comment\":\n      return (\n        <p {...attributes} style={{ opacity: 0.5 }}>\n          {children}\n        </p>\n      );\n    case \"editor\":\n      if (forbidenHandles.includes(element.handle))\n        return <div {...attributes}>{children}</div>;\n      return (\n        <div {...attributes}>\n          <div\n            contentEditable={false}\n            style={{ margin: \"0px -30px 10px -30px\" }}\n          >\n            <span style={{ display: \"none\" }}>{children}</span>\n            <div\n              contentEditable={false}\n              style={{\n                padding: \"10px 30px\",\n                backgroundColor: \"rgb(241 241 241 / 45%)\",\n                marginTop: -2,\n              }}\n            >\n              <InlineEditor handle={element.handle} />\n            </div>\n          </div>\n        </div>\n      );\n    default:\n      return (\n        <p {...attributes} className={element.type}>\n          {children}\n        </p>\n      );\n  }\n};\n","import { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\n\nexport const Code = styled.span<{\n  showAsLink?: boolean;\n}>`\n  background-color: #353535;\n  color: #eee;\n  border-radius: 3px;\n`;\n","import { useEffect, useState } from \"react\";\n\nexport const useKeyPress = (targetKey: string) => {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }: any) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }: any) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n};\n","import React from \"react\";\nimport { FC } from \"react\";\nimport { Link } from \"./Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport styled from \"@emotion/styled/macro\";\n\nconst PreviewStyled = styled.div`\n  width: auto;\n  z-index: 10;\n  width: max-content;\n  max-width: 400px;\n  position: absolute;\n  bottom: 100%;\n  left: 0;\n  padding-bottom: 10px;\n  div.content {\n    //border-radius: 5px;\n    border: 1px solid #dfdfdf;\n    background-color: white;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\n    padding: 10px;\n    font-size: 14px;\n  }\n`;\n\nconst PreviewContainer = styled.span`\n  position: relative;\n  ${PreviewStyled} {\n    visibility: hidden;\n    opacity: 0;\n    transition: visibility 0s, opacity 0.2s, transform 0.2s;\n    transform: translateY(-10px);\n  }\n  &:hover ${PreviewStyled} {\n    visibility: visible;\n    opacity: 1;\n    transform: translateY(0px);\n  }\n`;\n\nexport const Preview: FC<{\n  hide?: boolean;\n  previewContent?: string;\n  handle: string;\n}> = ({ children, hide, previewContent, handle }) => {\n  return (\n    <PreviewContainer>\n      <span>{children}</span>\n      {!hide && (\n        <PreviewStyled contentEditable={false} className=\"preview\">\n          {previewContent ? (\n            <div className=\"content\">\n              <div style={{ opacity: 0.5, marginBottom: 5 }}>Preview</div>\n              <div style={{ marginBottom: 5 }}>{previewContent}...</div>\n              <RouterLink to={\"/handle/\" + handle}>\n                <Link>Open</Link>\n              </RouterLink>\n            </div>\n          ) : (\n            <div className=\"content\">\n              <RouterLink to={\"/handle/\" + handle}>\n                <Link>Create</Link>\n              </RouterLink>\n            </div>\n          )}\n        </PreviewStyled>\n      )}\n    </PreviewContainer>\n  );\n};\n","import React from \"react\";\nimport { css, jsx } from \"@emotion/react\";\nimport { useFragmentContext } from \"contexts/fragment\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled from \"@emotion/styled/macro\";\nimport { Link } from \"components/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useKeyPress } from \"hooks/useKeyPress\";\nimport { Preview } from \"components/Preview\";\n\nconst HandleStyled = styled.span<{\n  exists?: boolean;\n  inline?: boolean;\n  showAsLink?: boolean;\n}>`\n  background-color: ${(p) => (p.exists ? \"#e2f8ff\" : \"#f1f1f1\")};\n  padding: 0 5px;\n\n  ${(p) =>\n    p.inline &&\n    css`\n      opacity: 0.2;\n      padding-right: 0;\n      background-color: transparent;\n    `}\n\n  ${(p) =>\n    p.showAsLink &&\n    css`\n      cursor: pointer;\n      &:hover {\n        border-bottom: 1px dashed;\n      }\n    `}\n`;\n\nexport const Handle = ({ text: leafText, children, inline, ...props }: any) => {\n  const navigate = useNavigate();\n  const text = leafText?.slice(1) || \"\";\n  const fragment = useFragmentContext();\n  const handlePreview = fragment?.linksTo?.find((l) => l?.handle === text);\n\n  const ctrlPress = useKeyPress(\"Control\");\n  const metaPress = useKeyPress(\"Meta\");\n\n  const showAsLink = ctrlPress || metaPress;\n\n  return (\n    <Preview\n      handle={text}\n      hide={inline}\n      previewContent={handlePreview?.previewContent || undefined}\n    >\n      <HandleStyled\n        {...props}\n        inline={inline}\n        exists={!!handlePreview}\n        showAsLink={showAsLink}\n        onClick={(e) => (e.ctrlKey || e.metaKey) && navigate(\"/handle/\" + text)}\n      >\n        <span>{children}</span>\n      </HandleStyled>\n    </Preview>\n  );\n};\n","import { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { useKeyPress } from \"hooks/useKeyPress\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst TagStyled = styled.span<{\n  showAsLink?: boolean;\n}>`\n  background-color: #ffebcc;\n  padding: 0 5px;\n\n  ${(p) =>\n    p.showAsLink &&\n    css`\n      cursor: pointer;\n      &:hover {\n        border-bottom: 1px dashed;\n      }\n    `}\n`;\n\nexport const Tag = ({ text: leafText, children, ...props }: any) => {\n  const navigate = useNavigate();\n  const ctrlPress = useKeyPress(\"Control\");\n  const metaPress = useKeyPress(\"Meta\");\n\n  const showAsLink = ctrlPress || metaPress;\n  return (\n    <TagStyled\n      showAsLink={showAsLink}\n      onClick={(e) =>\n        (e.ctrlKey || e.metaKey) && navigate(\"/tag/\" + leafText.slice(1))\n      }\n      {...props}\n    >\n      {children}\n    </TagStyled>\n  );\n};\n","import React from \"react\";\nimport { Code } from \"./Code\";\nimport { Handle } from \"./Handle\";\nimport { Tag } from \"./Tag\";\n\nexport const Leaf = ({ attributes, children, leaf }: any) => {\n  if (leaf.type === \"handle\")\n    return (\n      <Handle text={leaf.text} {...attributes}>\n        {children}\n      </Handle>\n    );\n\n  if (leaf.type === \"inlineHandle\")\n    return (\n      <Handle text={leaf.text} inline {...attributes}>\n        {children}\n      </Handle>\n    );\n\n  if (leaf.type === \"hashtag\")\n    return (\n      <Tag {...attributes} text={leaf.text}>\n        {children}\n      </Tag>\n    );\n\n  if (leaf.type === \"code\") return <Code {...attributes}>{children}</Code>;\n  return (\n    <span\n      style={{\n        fontWeight: leaf.type === \"bold\" ? \"bold\" : \"normal\",\n        fontStyle: leaf.type === \"italic\" ? \"italic\" : \"normal\",\n      }}\n      {...attributes}\n    >\n      {children}\n    </span>\n  );\n};\n","import styled from \"@emotion/styled\";\n\nexport const EditorStyled = styled.div`\n  width: 100%;\n  //background-color: white;\n  font-size: 20px;\n  line-height: 1.2;\n\n  & .public-DraftEditorPlaceholder-root {\n    position: absolute;\n    opacity: 0.3;\n    pointer-events: none;\n  }\n\n  & i {\n    font-style: italic;\n  }\n\n  & b {\n    font-weight: bold;\n  }\n\n  & h1 {\n    font-size: 35px;\n    font-weight: bold;\n    margin-bottom: 20px;\n  }\n\n  & h2 {\n    font-size: 30px;\n    font-weight: bold;\n    margin-bottom: 20px;\n  }\n\n  & h3 {\n    font-size: 25px;\n    font-weight: bold;\n    margin-bottom: 20px;\n  }\n\n  & li,\n  & ul {\n    list-style-type: none;\n    margin-left: 40px;\n    text-indent: -20px;\n    margin-bottom: 20px;\n\n    & + li,\n    & + ul {\n      margin-top: -20px;\n    }\n  }\n\n  & .paragraph,\n  & p {\n    margin-bottom: 20px;\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n`;\n","import { Editor, Node, Text } from \"slate\";\nimport { LEAF_REGEX, SHORTCUTS } from \"./constant\";\nexport const serialize = (input: string): Node[] => {\n  return input.split(\"\\n\").map((text) => {\n    let type = \"paragraph\";\n    // Object.keys(SHORTCUTS).forEach((short) => {\n    //   if (text?.match(new RegExp(short))) {\n    //     type = SHORTCUTS[short];\n    //   }\n    // });\n\n    return {\n      type,\n      children: [{ text }],\n    };\n  });\n};\n\nexport const decorate = ([node, path]: any) => {\n  const ranges: any[] = [];\n\n  if (Text.isText(node)) {\n    const { text } = node;\n\n    Object.keys(LEAF_REGEX).forEach((k) => {\n      var re = new RegExp(k, \"gim\");\n\n      let match;\n      while ((match = re.exec(text)) !== null) {\n        const start = match.index;\n        const end = match.index + match[0].length;\n\n        ranges.push({\n          anchor: { path, offset: start },\n          focus: { path, offset: end },\n          type: LEAF_REGEX[k],\n        });\n      }\n    });\n  }\n\n  return ranges;\n};\n\nexport const withNormalize = (editor: Editor) => {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = (entry) => {\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n\nexport const withNestedEditor = (editor: Editor) => {\n  const { isVoid } = editor;\n\n  editor.isVoid = (element) => {\n    return element.type === \"editor\" ? true : isVoid(element);\n  };\n\n  return editor;\n};\n\nexport const deserialize = (editorState: Node[]) => {\n  return editorState\n    .filter((n) => {\n      return !n.preventSerialization;\n    })\n    .map((n) => Node.string(n))\n    .join(\"\\n\");\n};\n","import { createDraft, finishDraft } from \"immer\";\nimport React, { FC, useEffect, useMemo, useRef, useState } from \"react\";\nimport { createEditor, Node, Transforms } from \"slate\";\nimport { Editable, Slate, withReact } from \"slate-react\";\nimport { useDebouncedCallback } from \"use-debounce/lib\";\nimport { SHORTCUTS } from \"./constant\";\nimport { ForbidenHandlesProvider, useForbidenHandlesContext } from \"./context\";\nimport { BlockElement } from \"./decorators/BlockElement\";\nimport { Leaf } from \"./decorators/Leaf\";\nimport { EditorStyled } from \"./styles\";\nimport {\n  decorate,\n  serialize,\n  deserialize,\n  withNormalize,\n  withNestedEditor,\n} from \"./utils\";\n\ntype EditorProps = {\n  initialValue?: string;\n  onChange?: (content: string) => any;\n  onSave?: (content: string) => any;\n  autoSave?: boolean;\n  spellCheck?: boolean;\n  autoFocus?: boolean;\n  onBlur?: (e: any) => any;\n  handle?: string;\n  forbiddenInlineHandles?: string[];\n};\nexport const Editor: FC<EditorProps> = ({\n  onChange: onChangeParent,\n  handle = \"\",\n  initialValue = \"\",\n  autoFocus,\n  autoSave = false,\n  spellCheck = false,\n  onSave,\n  onBlur,\n}) => {\n  const editorRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (autoFocus) editorRef.current?.focus();\n  }, [autoFocus]);\n\n  const [editorState, setEditorState] = useState(serialize(initialValue));\n  const [selectionState, setSelectionState] = useState<any>(null);\n\n  const editor = useMemo(\n    () => withReact(withNestedEditor(withNormalize(createEditor()))),\n    []\n  );\n\n  const debouncedSave = useDebouncedCallback(async () => {\n    onSave?.(deserialize(editorState));\n  }, 1000);\n\n  const handleBlur = (e: any) => {\n    onBlur?.(e);\n    onSave?.(deserialize(editorState));\n  };\n\n  const onChange = (value: any) => {\n    // This method might be crazy ineficient. Might be better to serialize the whole doc JSUT ONCE and the work\n    // by edited line and trigger rerender only on selected event.\n\n    // immerize collection\n    const _value: any[] = createDraft(value);\n    const _selection = createDraft(editor.selection || {});\n\n    let lastCodeFenceIndex: number | null = null;\n\n    _value.forEach((node: any, i: number) => {\n      if (node.type !== \"editor\" && node?.children?.[0]?.text === \"\") {\n        node.type = \"paragraph\";\n      }\n\n      Object.keys(SHORTCUTS).forEach((short) => {\n        if (node.children[0].text?.match(new RegExp(short))) {\n          node.type = SHORTCUTS[short];\n        }\n      });\n\n      // Code fence makes code blocks\n      if (node?.children?.[0]?.text === \"```\") {\n        if (lastCodeFenceIndex) {\n          node.type = \"pre-code-fence\";\n          _value[lastCodeFenceIndex].type = \"pre-code-fence\";\n          _value\n            .slice(lastCodeFenceIndex + 1, i)\n            .forEach((n: any) => (n.type = \"code\"));\n          lastCodeFenceIndex = null;\n        } else {\n          lastCodeFenceIndex = i;\n        }\n      }\n\n      // inline regex is followed by editor\n      if (node.children[0].text?.match(new RegExp(\"^@[a-zA-Z-]+:inline$\"))) {\n        node.type = \"editor-pre-handle\";\n        if (_value[i + 1].type !== \"editor\") {\n          _value.splice(i + 1, 0, {\n            type: \"editor\",\n            preventSerialization: true,\n            handle: node.children[0].text\n              .replace(\"@\", \"\")\n              .replace(\":inline\", \"\"),\n            children: [{ text: \"\" }],\n          });\n        }\n      }\n\n      // editor node must have an inline regex before\n      if (node.type === \"editor\") {\n        if (_value[i - 1].type !== \"editor-pre-handle\") {\n          _value.splice(i, 1);\n        }\n      }\n    });\n\n    // de-immerize collection\n    const editorContent: Node[] = finishDraft(_value);\n    const editorSelection = finishDraft(_selection);\n\n    // we batch our state updates so our children and selection stay in sync\n    setEditorState(editorContent);\n    setSelectionState(editorSelection);\n\n    // fire top editor component onChange event\n    onChangeParent?.(deserialize(editorContent));\n\n    // fire save event\n    if (autoSave) debouncedSave.callback();\n  };\n\n  // serialize live on first mount\n  useEffect(() => {\n    onChange(editorState);\n  }, []);\n\n  // update editor selection with our object\n  useEffect(() => {\n    if (selectionState) {\n      Transforms.setSelection(editor, selectionState);\n    }\n  }, [selectionState]);\n\n  // find forbiden inline handles\n  const forbidenHandles = useForbidenHandlesContext();\n\n  return (\n    <ForbidenHandlesProvider value={[...forbidenHandles, handle]}>\n      <EditorStyled>\n        <Slate\n          editor={editor}\n          value={editorState}\n          onChange={onChange}\n          ref={editorRef}\n        >\n          <Editable\n            renderElement={BlockElement}\n            autoFocus\n            decorate={decorate}\n            renderLeaf={Leaf}\n            onBlur={handleBlur}\n            spellCheck={spellCheck}\n          />\n        </Slate>\n      </EditorStyled>\n    </ForbidenHandlesProvider>\n  );\n};\n","import { Fragment as FragmentType } from \"graphql/generated\";\nimport React, { FC } from \"react\";\nimport { Expander, Flex } from \"../Layout\";\nimport { Link } from \"../Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useLogic } from \"./hooks\";\nimport {\n  BackLinksLine,\n  FragmentStyled,\n  HandleInput,\n  HideOut,\n  Info,\n} from \"./styles\";\nimport { format } from \"date-fns\";\nimport { FragmentProvider } from \"contexts/fragment\";\nimport { Editor } from \"components/Editor\";\nimport {\n  HiOutlineBadgeCheck,\n  HiOutlineChartSquareBar,\n  HiOutlineLink,\n  HiOutlineTrash,\n} from \"react-icons/hi\";\nimport { Preview } from \"components/Preview\";\nimport { FragmentDisplayType } from \"types\";\n\nexport const Fragment: FC<{\n  fragment?: FragmentDisplayType;\n\n  onDelete?: (uuid?: string) => any | void;\n  autoFocus?: boolean;\n}> = ({ fragment, onDelete, autoFocus }) => {\n  const {\n    handle,\n    hasBackLinks,\n    onSave,\n    onContentChange,\n    onHandleChange,\n    goToHandlePage,\n    useSpellCheck,\n    setUseSpellCheck,\n    uuid,\n  } = useLogic(fragment, autoFocus);\n\n  return (\n    <FragmentProvider value={fragment || undefined}>\n      <Flex col w=\"100%\">\n        <FragmentStyled>\n          <HideOut>\n            <Flex>\n              <HandleInput\n                value={handle}\n                onChange={(e) => onHandleChange(e.target.value)}\n                spellCheck={false}\n                onBlur={() => onSave()}\n                onClick={goToHandlePage}\n              />\n              <Expander />\n              <div>\n                <Link onClick={() => onDelete?.(uuid || undefined)}>\n                  <HiOutlineTrash />\n                </Link>\n              </div>\n            </Flex>\n          </HideOut>\n          <Editor\n            autoFocus={autoFocus}\n            onChange={onContentChange}\n            initialValue={fragment?.content || \"\"}\n            handle={handle}\n            autoSave\n            spellCheck={useSpellCheck}\n            onSave={onSave}\n          />\n          <HideOut>\n            <Flex style={{ marginTop: 20 }}>\n              <Info>\n                {format(fragment?.createdAt || new Date(), \"dd/MM/yyyy\")}\n              </Info>\n              <Info ml={10}>\n                <Link onClick={() => setUseSpellCheck(!useSpellCheck)}>\n                  <HiOutlineBadgeCheck />\n                </Link>\n              </Info>\n              <Info ml={10}>\n                <Link>\n                  <HiOutlineChartSquareBar />\n                </Link>\n              </Info>\n              <Expander />\n            </Flex>\n          </HideOut>\n        </FragmentStyled>\n        {hasBackLinks && (\n          <BackLinksLine mt={20}>\n            <HiOutlineLink />\n            {fragment?.linkedBy?.map((link) => (\n              <Flex mr={10}>\n                <Preview\n                  handle={link.handle}\n                  previewContent={link.previewContent}\n                >\n                  <RouterLink to={\"/handle/\" + link?.handle}>\n                    <Link>{link?.handle}</Link>\n                  </RouterLink>\n                </Preview>\n              </Flex>\n            ))}\n          </BackLinksLine>\n        )}\n      </Flex>\n    </FragmentProvider>\n  );\n};\n","import { useSaveFragmentMutation } from \"graphql/generated\";\nimport getHumanId from \"human-id\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FragmentDisplayType } from \"types\";\nexport const useLogic = (\n  fragment?: FragmentDisplayType,\n  autoFocus?: boolean\n) => {\n  const navigate = useNavigate();\n\n  const [isDirty, setIsDirty] = useState(false);\n  const [useSpellCheck, setUseSpellCheck] = useState(false);\n\n  const [c, setC] = useState(0);\n  const [w, setW] = useState(0);\n\n  const [handle, setHandle] = useState(\n    fragment?.handle ||\n      getHumanId({\n        separator: \"-\",\n        capitalize: false,\n      })\n  );\n  const [uuid, setUuid] = useState<string | undefined>(\n    fragment?.uuid || undefined\n  );\n  const [content, setContent] = useState<string>(fragment?.content || \"\");\n\n  const count = useCallback((content: string) => {\n    setC(content.length);\n    setW(content.length ? content.split(\" \").length : 0);\n  }, []);\n\n  const [saveFragment, { loading }] = useSaveFragmentMutation();\n\n  const onSave = useCallback(async () => {\n    if ((!uuid && !content) || !isDirty || loading) return;\n    const result = await saveFragment({\n      variables: {\n        fragment: {\n          content,\n          handle,\n          uuid,\n        },\n      },\n    });\n\n    const newUuid = result.data?.fragment?.uuid;\n    if (!!newUuid && newUuid !== uuid) setUuid(newUuid);\n\n    setIsDirty(false);\n    return result;\n  }, [isDirty, uuid, content, handle, loading, saveFragment]);\n\n  const onContentChange = useCallback((newContent: string) => {\n    if (content === newContent) return;\n    setContent(newContent);\n    setIsDirty(true);\n  }, []);\n\n  const onHandleChange = (handle: string) => {\n    setHandle(handle);\n    setIsDirty(true);\n  };\n\n  useEffect(() => {\n    count(content);\n  }, [content, count]);\n\n  const goToHandlePage = (\n    e: React.MouseEvent<HTMLInputElement, MouseEvent>\n  ) => {\n    if (e.ctrlKey || e.metaKey) navigate(\"/handle/\" + e.currentTarget.value);\n  };\n\n  const hasBackLinks = !!fragment?.linkedBy?.length;\n\n  return {\n    hasBackLinks,\n    setHandle,\n    onSave,\n    onContentChange,\n    onHandleChange,\n    goToHandlePage,\n    useSpellCheck,\n    setUseSpellCheck,\n    handle,\n    w,\n    c,\n    uuid,\n  };\n};\n","import { Fragment } from \"components/Fragment\";\nimport { Flex } from \"components/Layout\";\nimport { Link } from \"components/Link\";\nimport { Loading } from \"components/Loading\";\nimport {\n  useDeleteFragmentMutation,\n  useGetFragmentByHandleQuery,\n} from \"graphql/generated\";\nimport React from \"react\";\nimport { Link as RouterLink, useNavigate, useParams } from \"react-router-dom\";\n\nexport const FragmentPage = () => {\n  const navigate = useNavigate();\n  const { handle } = useParams();\n\n  const { data, loading } = useGetFragmentByHandleQuery({\n    variables: { handle },\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  const fragment = data?.fragmentByHandle;\n\n  const [deleteFragment] = useDeleteFragmentMutation();\n  const onDelete = () => {\n    if (fragment?.uuid) deleteFragment({ variables: { uuid: fragment?.uuid } });\n    navigate(\"/\");\n  };\n\n  const showLoader = loading && !fragment;\n\n  return (\n    <>\n      <Flex style={{ marginBottom: 20 }}>\n        <RouterLink to=\"/\">\n          <Link>Back home</Link>\n        </RouterLink>\n      </Flex>\n\n      {showLoader && (\n        <Flex justify=\"center\" mt={50}>\n          <Loading />\n        </Flex>\n      )}\n\n      {!showLoader && (\n        <Fragment\n          fragment={\n            fragment || {\n              handle,\n              content: \"\",\n              linksTo: [],\n              linkedBy: [],\n              tags: [],\n            }\n          }\n          key={fragment?.handle}\n          onDelete={onDelete}\n        />\n      )}\n    </>\n  );\n};\n","import styled from \"@emotion/styled\";\nimport React, { FC } from \"react\";\nimport { useState } from \"react\";\nimport { Fragment } from \"./Fragment\";\nimport OutsideClickHandler from \"react-outside-click-handler\";\n\nconst NewBlock = styled.div`\n  padding: 20px;\n  background-color: white;\n  width: 100%;\n  font-style: italic;\n  color: #ccc;\n  font-size: 20px;\n  cursor: text;\n`;\n\nexport const NewFragment: FC<{\n  onOutsideClick?: () => any;\n  placeholder?: string;\n}> = ({ onOutsideClick, placeholder = \"What's on your mind ?\" }) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const handleOutsideClick = () => {\n    setIsEditing(false);\n    onOutsideClick?.();\n  };\n\n  if (!isEditing)\n    return (\n      <NewBlock onClick={() => setIsEditing(true)}>{placeholder}</NewBlock>\n    );\n  if (isEditing)\n    return (\n      <div style={{ width: \"100%\" }}>\n        <OutsideClickHandler onOutsideClick={handleOutsideClick}>\n          <Fragment autoFocus onDelete={() => setIsEditing(false)} />\n        </OutsideClickHandler>\n      </div>\n    );\n\n  return null;\n};\n","import { Fragment } from \"components/Fragment\";\nimport { Flex } from \"components/Layout\";\nimport { Link } from \"components/Link\";\nimport { NewFragment } from \"components/NewFragment\";\nimport {\n  useDeleteFragmentMutation,\n  useGetFragmentsQuery,\n} from \"graphql/generated\";\nimport React, { useMemo } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nexport const Feed = () => {\n  const { data: fragmentQuery, refetch } = useGetFragmentsQuery({\n    fetchPolicy: \"cache-and-network\",\n  });\n  const fragments = useMemo(() => fragmentQuery?.fragments, [fragmentQuery]);\n\n  const { data: starFragmentQuery } = useGetFragmentsQuery({\n    variables: { filter: { tags: \"star\" } },\n  });\n\n  const starFragments = useMemo(() => starFragmentQuery?.fragments, [\n    starFragmentQuery,\n  ]);\n\n  const [deleteFragment] = useDeleteFragmentMutation();\n\n  const onDelete = (uuid: string) => {\n    deleteFragment({ variables: { uuid } });\n    refetch();\n  };\n\n  return (\n    <>\n      <Flex style={{ marginBottom: 20 }}>\n        <RouterLink to=\"/\">\n          <Link>Back home</Link>\n        </RouterLink>\n      </Flex>\n      <Flex>\n        <NewFragment onOutsideClick={() => refetch()} />\n      </Flex>\n      {!!starFragments?.length && (\n        <>\n          <Flex\n            style={{\n              justifyContent: \"center\",\n              margin: \"50px 0\",\n              color: \"#bbb\",\n            }}\n          >\n            Star Fragments\n          </Flex>\n          {starFragments?.map((fragment) => (\n            <Flex style={{ marginBottom: 20 }} key={fragment.uuid}>\n              <Fragment\n                fragment={fragment}\n                onDelete={(uuid) => uuid && onDelete(uuid)}\n              />\n            </Flex>\n          ))}\n        </>\n      )}\n      {!!fragments?.length && (\n        <>\n          <Flex\n            style={{\n              justifyContent: \"center\",\n              margin: \"50px 0\",\n              color: \"#bbb\",\n            }}\n          >\n            Recent Fragments\n          </Flex>\n          {fragments\n            ?.filter((f) => !starFragments?.find((st) => st.uuid === f.uuid))\n            .map((fragment) => (\n              <Flex style={{ marginBottom: 20 }} key={fragment.uuid}>\n                <Fragment\n                  fragment={fragment}\n                  onDelete={(uuid) => uuid && onDelete(uuid)}\n                />\n              </Flex>\n            ))}\n        </>\n      )}\n    </>\n  );\n};\n","import { Fragment } from \"components/Fragment\";\nimport { Flex } from \"components/Layout\";\nimport { Link } from \"components/Link\";\nimport { Loading } from \"components/Loading\";\nimport { NewFragment } from \"components/NewFragment\";\nimport {\n  useDeleteFragmentMutation,\n  useGetFragmentByHandleQuery,\n  useGetFragmentsQuery,\n} from \"graphql/generated\";\nimport React, { useCallback } from \"react\";\n\nexport const Home = () => {\n  const { data, loading, refetch } = useGetFragmentsQuery({\n    variables: { filter: { tags: \"home\" } },\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  const fragments = data?.fragments;\n\n  const [deleteFragment] = useDeleteFragmentMutation();\n  const onDelete = (uuid: string) => {\n    deleteFragment({ variables: { uuid } });\n    refetch();\n  };\n\n  return (\n    <div>\n      <Flex style={{ marginBottom: 20 }}>\n        <NewFragment onOutsideClick={refetch} placeholder=\"New fragment\" />\n      </Flex>\n\n      {loading && !fragments?.length && (\n        <Flex justify=\"center\" mt={50}>\n          <Loading />\n        </Flex>\n      )}\n\n      {!loading && !fragments?.length && (\n        <Flex\n          style={{\n            justifyContent: \"center\",\n            margin: \"50px 0\",\n            color: \"#bbb\",\n          }}\n        >\n          To add a fragment to your home, just tag it \"#home\"\n        </Flex>\n      )}\n      {fragments?.map((fragment) => (\n        <Flex style={{ marginBottom: 20 }} key={fragment.uuid}>\n          <Fragment\n            fragment={fragment}\n            onDelete={(uuid) => uuid && onDelete(uuid)}\n          />\n        </Flex>\n      ))}\n    </div>\n  );\n};\n","import styled from \"@emotion/styled\";\nimport { Fragment } from \"components/Fragment\";\nimport { Flex } from \"components/Layout\";\nimport { Link } from \"components/Link\";\nimport { Loading } from \"components/Loading\";\nimport {\n  useDeleteFragmentMutation,\n  useGetFragmentsQuery,\n  useGetTagsQuery,\n} from \"graphql/generated\";\nimport React, { useMemo } from \"react\";\nimport { Link as RouterLink, useParams } from \"react-router-dom\";\n\nconst SubTagsBlock = styled.div`\n  margin: 10px 0;\n`;\n\nexport const TagPage = () => {\n  const { tag } = useParams();\n\n  const { data: fragmentQuery, refetch, loading } = useGetFragmentsQuery({\n    variables: { filter: { tags: tag } },\n  });\n  const fragments = useMemo(() => fragmentQuery?.fragments, [fragmentQuery]);\n  const { data: tagsQuery } = useGetTagsQuery({\n    fetchPolicy: \"cache-and-network\",\n  });\n  const subTags = tagsQuery?.tags.filter((t) => t.startsWith(tag + \"-\"));\n\n  const [deleteFragment] = useDeleteFragmentMutation();\n  const onDelete = (uuid: string) => {\n    deleteFragment({ variables: { uuid } });\n    refetch();\n  };\n\n  return (\n    <Flex col key={tag}>\n      <RouterLink to=\"/\">\n        <Link>Back home</Link>\n      </RouterLink>\n      <Flex\n        mt={10}\n        mb={20}\n        style={{\n          color: \"#bbb\",\n          fontSize: 40,\n        }}\n      >\n        #{tag}\n      </Flex>\n      {!!subTags?.length && (\n        <Flex mb={30}>\n          {subTags.map((tag) => (\n            <RouterLink to={\"/tag/\" + tag}>\n              <Link style={{ marginRight: 10 }}>#{tag}</Link>\n            </RouterLink>\n          ))}\n        </Flex>\n      )}\n\n      {loading && !fragments?.length && (\n        <Flex justify=\"center\" mt={50}>\n          <Loading />\n        </Flex>\n      )}\n\n      {fragments?.map((fragment) => (\n        <Flex style={{ marginBottom: 20 }} key={fragment.uuid}>\n          <Fragment\n            fragment={fragment}\n            onDelete={(uuid) => uuid && onDelete(uuid)}\n          />\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\n","import { useAuth0 } from \"@auth0/auth0-react\";\nimport { Container, Main, Body, Flex } from \"components/Layout\";\nimport { Side } from \"components/Side\";\nimport { FragmentPage } from \"pages/FragmentPage\";\nimport { Feed } from \"pages/Feed\";\nimport { Home } from \"pages/Home\";\nimport { TagPage } from \"pages/TagPage\";\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  Navigate,\n  Route,\n  Routes,\n} from \"react-router-dom\";\nimport { Loading } from \"components/Loading\";\nimport humanId from \"human-id\";\nimport { HiOutlinePlus } from \"react-icons/hi\";\nimport { Button } from \"components/Button\";\n\nexport const MainRouter = () => {\n  const { loginWithRedirect, isLoading, isAuthenticated } = useAuth0();\n\n  if (isLoading)\n    return (\n      <Main>\n        <Flex justify=\"center\" align=\"center\">\n          <Loading />\n        </Flex>\n      </Main>\n    );\n\n  if (!isAuthenticated) {\n    loginWithRedirect();\n    return <Main></Main>;\n  }\n\n  return (\n    <Router>\n      <Main>\n        <Side />\n        <Body>\n          <Container>\n            <Routes>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n              <Route path=\"/feed\">\n                <Feed />\n              </Route>\n              <Route path=\"/handle/:handle\">\n                <FragmentPage />\n              </Route>\n              <Route path=\"/handle/new\">\n                <Navigate\n                  to={\n                    \"/handle/\" + humanId({ capitalize: false, separator: \"-\" })\n                  }\n                />\n              </Route>\n              <Route path=\"/tag/:tag\">\n                <TagPage />\n              </Route>\n            </Routes>\n          </Container>\n        </Body>\n      </Main>\n    </Router>\n  );\n};\n","import { ApolloProvider } from \"@apollo/client\";\nimport { Auth0Provider, useAuth0 } from \"@auth0/auth0-react\";\nimport { GlobalStyles } from \"GlobalStyles\";\nimport { useInitializeApolloClient } from \"libs/apollo\";\nimport React from \"react\";\nimport { MainRouter } from \"./MainRouter\";\n\nconst AuthorizedApp = () => {\n  const { getAccessTokenSilently } = useAuth0();\n  const { client } = useInitializeApolloClient(getAccessTokenSilently);\n\n  return (\n    <ApolloProvider client={client}>\n      <GlobalStyles />\n      <MainRouter />\n    </ApolloProvider>\n  );\n};\n\nconst App = () => (\n  <Auth0Provider\n    domain=\"fragment-app.eu.auth0.com\"\n    clientId=\"Zt12A3VhpiI83mOPs3S0MgOqf1NpWO94\"\n    redirectUri={window.location.origin}\n    audience=\"https://fragment.ml\"\n  >\n    <AuthorizedApp />\n  </Auth0Provider>\n);\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}