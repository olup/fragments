[{"/home/olup/development/tests/fragments/packages/web/src/index.tsx":"1","/home/olup/development/tests/fragments/packages/web/src/App.tsx":"2","/home/olup/development/tests/fragments/packages/web/src/MainRouter.tsx":"3","/home/olup/development/tests/fragments/packages/web/src/libs/apollo.ts":"4","/home/olup/development/tests/fragments/packages/web/src/GlobalStyles.tsx":"5","/home/olup/development/tests/fragments/packages/web/src/components/Layout.tsx":"6","/home/olup/development/tests/fragments/packages/web/src/components/Side.tsx":"7","/home/olup/development/tests/fragments/packages/web/src/components/Loading.tsx":"8","/home/olup/development/tests/fragments/packages/web/src/pages/Feed.tsx":"9","/home/olup/development/tests/fragments/packages/web/src/pages/FragmentPage.tsx":"10","/home/olup/development/tests/fragments/packages/web/src/pages/Home.tsx":"11","/home/olup/development/tests/fragments/packages/web/src/pages/TagPage.tsx":"12","/home/olup/development/tests/fragments/packages/web/src/components/Button.tsx":"13","/home/olup/development/tests/fragments/packages/web/src/components/Link.tsx":"14","/home/olup/development/tests/fragments/packages/web/src/components/NewFragment.tsx":"15","/home/olup/development/tests/fragments/packages/web/src/graphql/generated.ts":"16","/home/olup/development/tests/fragments/packages/web/src/components/Fragment/index.tsx":"17","/home/olup/development/tests/fragments/packages/web/src/components/Fragment/hooks.tsx":"18","/home/olup/development/tests/fragments/packages/web/src/components/Fragment/styles.tsx":"19","/home/olup/development/tests/fragments/packages/web/src/components/Preview.tsx":"20","/home/olup/development/tests/fragments/packages/web/src/contexts/fragment.tsx":"21","/home/olup/development/tests/fragments/packages/web/src/components/Editor/index.tsx":"22","/home/olup/development/tests/fragments/packages/web/src/components/Editor/utils.ts":"23","/home/olup/development/tests/fragments/packages/web/src/components/Editor/context.ts":"24","/home/olup/development/tests/fragments/packages/web/src/components/Editor/constant.ts":"25","/home/olup/development/tests/fragments/packages/web/src/components/Editor/styles.tsx":"26","/home/olup/development/tests/fragments/packages/web/src/components/Editor/decorators/BlockElement.tsx":"27","/home/olup/development/tests/fragments/packages/web/src/components/Editor/decorators/Leaf.tsx":"28","/home/olup/development/tests/fragments/packages/web/src/components/Editor/decorators/Code.tsx":"29","/home/olup/development/tests/fragments/packages/web/src/components/Editor/decorators/Tag.tsx":"30","/home/olup/development/tests/fragments/packages/web/src/components/Editor/decorators/Handle.tsx":"31","/home/olup/development/tests/fragments/packages/web/src/components/InlineEditor.tsx":"32","/home/olup/development/tests/fragments/packages/web/src/hooks/useKeyPress.ts":"33"},{"size":484,"mtime":1613821736000,"results":"34","hashOfConfig":"35"},{"size":828,"mtime":1613821736000,"results":"36","hashOfConfig":"35"},{"size":1747,"mtime":1613821736000,"results":"37","hashOfConfig":"35"},{"size":978,"mtime":1613821736000,"results":"38","hashOfConfig":"35"},{"size":2433,"mtime":1613821736000,"results":"39","hashOfConfig":"35"},{"size":925,"mtime":1613821736000,"results":"40","hashOfConfig":"35"},{"size":3885,"mtime":1615278561630,"results":"41","hashOfConfig":"35"},{"size":1283,"mtime":1613821736000,"results":"42","hashOfConfig":"35"},{"size":2443,"mtime":1613821736000,"results":"43","hashOfConfig":"35"},{"size":1503,"mtime":1613821736000,"results":"44","hashOfConfig":"35"},{"size":1606,"mtime":1613821736000,"results":"45","hashOfConfig":"35"},{"size":2006,"mtime":1613821736000,"results":"46","hashOfConfig":"35"},{"size":368,"mtime":1613821736000,"results":"47","hashOfConfig":"35"},{"size":207,"mtime":1613821736000,"results":"48","hashOfConfig":"35"},{"size":1062,"mtime":1613821736000,"results":"49","hashOfConfig":"35"},{"size":16033,"mtime":1613821736000,"results":"50","hashOfConfig":"35"},{"size":3209,"mtime":1613821736000,"results":"51","hashOfConfig":"35"},{"size":2313,"mtime":1613821736000,"results":"52","hashOfConfig":"35"},{"size":1068,"mtime":1613821736000,"results":"53","hashOfConfig":"35"},{"size":1801,"mtime":1613821736000,"results":"54","hashOfConfig":"35"},{"size":379,"mtime":1613821736000,"results":"55","hashOfConfig":"35"},{"size":4967,"mtime":1613821736000,"results":"56","hashOfConfig":"35"},{"size":1586,"mtime":1613821736000,"results":"57","hashOfConfig":"35"},{"size":351,"mtime":1613821736000,"results":"58","hashOfConfig":"35"},{"size":564,"mtime":1613821736000,"results":"59","hashOfConfig":"35"},{"size":883,"mtime":1613821736000,"results":"60","hashOfConfig":"35"},{"size":2239,"mtime":1613821736000,"results":"61","hashOfConfig":"35"},{"size":909,"mtime":1613821736000,"results":"62","hashOfConfig":"35"},{"size":208,"mtime":1613821736000,"results":"63","hashOfConfig":"35"},{"size":902,"mtime":1613821736000,"results":"64","hashOfConfig":"35"},{"size":1691,"mtime":1613821736000,"results":"65","hashOfConfig":"35"},{"size":871,"mtime":1613821736000,"results":"66","hashOfConfig":"35"},{"size":965,"mtime":1613821736000,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1ciwu5z",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"70"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"70"},"/home/olup/development/tests/fragments/packages/web/src/index.tsx",[],["149","150"],"/home/olup/development/tests/fragments/packages/web/src/App.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/MainRouter.tsx",["151","152","153"],"import { useAuth0 } from \"@auth0/auth0-react\";\nimport { Container, Main, Body, Flex } from \"components/Layout\";\nimport { Side } from \"components/Side\";\nimport { FragmentPage } from \"pages/FragmentPage\";\nimport { Feed } from \"pages/Feed\";\nimport { Home } from \"pages/Home\";\nimport { TagPage } from \"pages/TagPage\";\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Link,\n  Navigate,\n  Route,\n  Routes,\n} from \"react-router-dom\";\nimport { Loading } from \"components/Loading\";\nimport humanId from \"human-id\";\nimport { HiOutlinePlus } from \"react-icons/hi\";\nimport { Button } from \"components/Button\";\n\nexport const MainRouter = () => {\n  const { loginWithRedirect, isLoading, isAuthenticated } = useAuth0();\n\n  if (isLoading)\n    return (\n      <Main>\n        <Flex justify=\"center\" align=\"center\">\n          <Loading />\n        </Flex>\n      </Main>\n    );\n\n  if (!isAuthenticated) {\n    loginWithRedirect();\n    return <Main></Main>;\n  }\n\n  return (\n    <Router>\n      <Main>\n        <Side />\n        <Body>\n          <Container>\n            <Routes>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n              <Route path=\"/feed\">\n                <Feed />\n              </Route>\n              <Route path=\"/handle/:handle\">\n                <FragmentPage />\n              </Route>\n              <Route path=\"/handle/new\">\n                <Navigate\n                  to={\n                    \"/handle/\" + humanId({ capitalize: false, separator: \"-\" })\n                  }\n                />\n              </Route>\n              <Route path=\"/tag/:tag\">\n                <TagPage />\n              </Route>\n            </Routes>\n          </Container>\n        </Body>\n      </Main>\n    </Router>\n  );\n};\n","/home/olup/development/tests/fragments/packages/web/src/libs/apollo.ts",[],"/home/olup/development/tests/fragments/packages/web/src/GlobalStyles.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/components/Layout.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/components/Side.tsx",["154"],"import styled from \"@emotion/styled\";\nimport {\n  useGetFragmentsPreviewQuery,\n  useGetTagsQuery,\n} from \"graphql/generated\";\nimport { FC, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { HiOutlinePlus } from \"react-icons/hi\";\nimport { Link } from \"react-router-dom\";\nimport { useDebounce } from \"use-debounce/lib\";\nimport { Button } from \"./Button\";\nimport { Flex } from \"./Layout\";\nimport { Loading } from \"./Loading\";\n\nconst SIDE_WIDTH = 250;\n\nconst SideStyled = styled.div<{ isVisible?: boolean }>`\n  width: ${(p) => (p.isVisible ? SIDE_WIDTH : 0)}px;\n  box-sizing: border-box;\n  overflow: hidden;\n  color: #aaa;\n  transition: 0.5s;\n\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  font-size: 20px;\n\n  z-index: 100;\n`;\n\nconst Inside = styled.div`\n  background-color: #222;\n  width: ${SIDE_WIDTH}px;\n  padding: 20px;\n  padding-top: 50px;\n  height: 100%;\n  box-sizing: border-box;\n`;\n\nconst FixLink = styled.span`\n  position: fixed;\n  top: 10px;\n  left: 20px;\n  padding: 3px;\n  color: #aaa;\n  cursor: pointer;\n  &:hover {\n    border-bottom: 1px dashed;\n  }\n`;\n\nconst Title = styled.div`\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\nconst SearchInput = styled.input`\n  padding: 10px 20px;\n  border: none;\n  outline: none;\n  font-size: 18px;\n  width: 100%;\n  opacity: 0.5;\n  &:hover,\n  &:focus {\n    opacity: 1;\n  }\n`;\n\nexport const Side: FC = () => {\n  const [isVisible, setIsVisbile] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const tagQuery = useGetTagsQuery();\n  const tags = [...(tagQuery?.data?.tags || [])].sort();\n  const [debouncedSearch] = useDebounce(search, 1000);\n\n  const { data: fragmentsFoundResponse, loading } = useGetFragmentsPreviewQuery(\n    {\n      skip: !search,\n      variables: {\n        filter: { content: debouncedSearch, handle: debouncedSearch },\n      },\n    }\n  );\n\n  const fragmentsFound = useMemo(\n    () => fragmentsFoundResponse?.fragments || [],\n    [fragmentsFoundResponse?.fragments]\n  );\n\n  useEffect(() => {\n    if (isVisible) tagQuery?.refetch?.();\n  }, [isVisible]);\n\n  const handleToggleShow = useCallback(() => {\n    setIsVisbile(!isVisible);\n    setSearch(\"\");\n  }, [isVisible, setIsVisbile, setSearch]);\n\n  return (\n    <>\n      <SideStyled\n        isVisible={isVisible}\n        style={{ position: \"relative\" }}\n      ></SideStyled>\n\n      <SideStyled isVisible={isVisible}>\n        <Inside>\n          <FixLink onClick={handleToggleShow}>\n            {isVisible ? \"Hide\" : \"Show\"} Side\n          </FixLink>\n\n          <Link to=\"/handle/new\" style={{ marginBottom: 20 }}>\n            <Button>\n              <HiOutlinePlus size={15} /> New fragment\n            </Button>\n          </Link>\n\n          <Flex mb={20} mr={-20} ml={-20}>\n            <SearchInput\n              placeholder=\"search\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n            />\n            {loading && (\n              <Flex style={{ position: \"absolute\", right: 25, top: 15 }}>\n                <Loading />\n              </Flex>\n            )}\n          </Flex>\n\n          {!search && (\n            <>\n              <Title style={{ marginBottom: 10 }}>\n                <Link to={\"/\"}>Home</Link>\n              </Title>\n\n              <Title style={{ marginBottom: 10 }}>\n                <Link to={\"/feed\"}>Feed</Link>\n              </Title>\n\n              <Title>Tags</Title>\n              {tags?.map((tag) => (\n                <div>\n                  <Link to={\"/tag/\" + tag}>#{tag}</Link>\n                </div>\n              ))}\n            </>\n          )}\n\n          {search && (\n            <>\n              {fragmentsFound?.map((frament) => (\n                <div>\n                  <Link to={\"/handle/\" + frament.handle}>{frament.handle}</Link>\n                </div>\n              ))}\n            </>\n          )}\n        </Inside>\n      </SideStyled>\n    </>\n  );\n};\n","/home/olup/development/tests/fragments/packages/web/src/components/Loading.tsx",["155"],"import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst SPEED = 2;\nexport const Loading = styled.div`\n  /**\n * ==============================================\n * Dot Flashing\n * ==============================================\n */\n\n  position: relative;\n  width: 10px;\n  height: 10px;\n  // border-radius: 5px;\n  background-color: rgba(0, 0, 0, 0.05);\n  color: rgba(0, 0, 0, 0.05);\n  animation: dotFlashing ${SPEED}s infinite normal;\n  animation-delay: ${SPEED / 3}s;\n\n  &::before,\n  &::after {\n    content: \"\";\n    display: inline-block;\n    position: absolute;\n    top: 0;\n  }\n\n  &::before {\n    left: -15px;\n    width: 10px;\n    height: 10px;\n    //border-radius: 5px;\n    background-color: rgba(0, 0, 0, 0.05);\n    color: rgba(0, 0, 0, 0.05);\n    animation: dotFlashing ${SPEED}s infinite normal;\n    animation-delay: 0s;\n  }\n\n  &::after {\n    left: 15px;\n    width: 10px;\n    height: 10px;\n    // border-radius: 5px;\n    background-color: rgba(0, 0, 0, 0.05);\n    color: rgba(0, 0, 0, 0.05);\n    animation: dotFlashing ${SPEED}s infinite normal;\n    animation-delay: ${(SPEED / 3) * 2}s;\n  }\n\n  @keyframes dotFlashing {\n    0%,\n    50%,\n    100% {\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n    80% {\n      background-color: rgba(0, 0, 0, 0.5);\n    }\n  }\n`;\n","/home/olup/development/tests/fragments/packages/web/src/pages/Feed.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/pages/FragmentPage.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/pages/Home.tsx",["156","157","158"],"import { Fragment } from \"components/Fragment\";\nimport { Flex } from \"components/Layout\";\nimport { Link } from \"components/Link\";\nimport { Loading } from \"components/Loading\";\nimport { NewFragment } from \"components/NewFragment\";\nimport {\n  useDeleteFragmentMutation,\n  useGetFragmentByHandleQuery,\n  useGetFragmentsQuery,\n} from \"graphql/generated\";\nimport React, { useCallback } from \"react\";\n\nexport const Home = () => {\n  const { data, loading, refetch } = useGetFragmentsQuery({\n    variables: { filter: { tags: \"home\" } },\n    fetchPolicy: \"cache-and-network\",\n  });\n\n  const fragments = data?.fragments;\n\n  const [deleteFragment] = useDeleteFragmentMutation();\n  const onDelete = (uuid: string) => {\n    deleteFragment({ variables: { uuid } });\n    refetch();\n  };\n\n  return (\n    <div>\n      <Flex style={{ marginBottom: 20 }}>\n        <NewFragment onOutsideClick={refetch} placeholder=\"New fragment\" />\n      </Flex>\n\n      {loading && !fragments?.length && (\n        <Flex justify=\"center\" mt={50}>\n          <Loading />\n        </Flex>\n      )}\n\n      {!loading && !fragments?.length && (\n        <Flex\n          style={{\n            justifyContent: \"center\",\n            margin: \"50px 0\",\n            color: \"#bbb\",\n          }}\n        >\n          To add a fragment to your home, just tag it \"#home\"\n        </Flex>\n      )}\n      {fragments?.map((fragment) => (\n        <Flex style={{ marginBottom: 20 }} key={fragment.uuid}>\n          <Fragment\n            fragment={fragment}\n            onDelete={(uuid) => uuid && onDelete(uuid)}\n          />\n        </Flex>\n      ))}\n    </div>\n  );\n};\n","/home/olup/development/tests/fragments/packages/web/src/pages/TagPage.tsx",["159"],"import styled from \"@emotion/styled\";\nimport { Fragment } from \"components/Fragment\";\nimport { Flex } from \"components/Layout\";\nimport { Link } from \"components/Link\";\nimport { Loading } from \"components/Loading\";\nimport {\n  useDeleteFragmentMutation,\n  useGetFragmentsQuery,\n  useGetTagsQuery,\n} from \"graphql/generated\";\nimport React, { useMemo } from \"react\";\nimport { Link as RouterLink, useParams } from \"react-router-dom\";\n\nconst SubTagsBlock = styled.div`\n  margin: 10px 0;\n`;\n\nexport const TagPage = () => {\n  const { tag } = useParams();\n\n  const { data: fragmentQuery, refetch, loading } = useGetFragmentsQuery({\n    variables: { filter: { tags: tag } },\n  });\n  const fragments = useMemo(() => fragmentQuery?.fragments, [fragmentQuery]);\n  const { data: tagsQuery } = useGetTagsQuery({\n    fetchPolicy: \"cache-and-network\",\n  });\n  const subTags = tagsQuery?.tags.filter((t) => t.startsWith(tag + \"-\"));\n\n  const [deleteFragment] = useDeleteFragmentMutation();\n  const onDelete = (uuid: string) => {\n    deleteFragment({ variables: { uuid } });\n    refetch();\n  };\n\n  return (\n    <Flex col key={tag}>\n      <RouterLink to=\"/\">\n        <Link>Back home</Link>\n      </RouterLink>\n      <Flex\n        mt={10}\n        mb={20}\n        style={{\n          color: \"#bbb\",\n          fontSize: 40,\n        }}\n      >\n        #{tag}\n      </Flex>\n      {!!subTags?.length && (\n        <Flex mb={30}>\n          {subTags.map((tag) => (\n            <RouterLink to={\"/tag/\" + tag}>\n              <Link style={{ marginRight: 10 }}>#{tag}</Link>\n            </RouterLink>\n          ))}\n        </Flex>\n      )}\n\n      {loading && !fragments?.length && (\n        <Flex justify=\"center\" mt={50}>\n          <Loading />\n        </Flex>\n      )}\n\n      {fragments?.map((fragment) => (\n        <Flex style={{ marginBottom: 20 }} key={fragment.uuid}>\n          <Fragment\n            fragment={fragment}\n            onDelete={(uuid) => uuid && onDelete(uuid)}\n          />\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\n","/home/olup/development/tests/fragments/packages/web/src/components/Button.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/components/Link.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/components/NewFragment.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/graphql/generated.ts",[],"/home/olup/development/tests/fragments/packages/web/src/components/Fragment/index.tsx",["160"],"import { Fragment as FragmentType } from \"graphql/generated\";\nimport React, { FC } from \"react\";\nimport { Expander, Flex } from \"../Layout\";\nimport { Link } from \"../Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useLogic } from \"./hooks\";\nimport {\n  BackLinksLine,\n  FragmentStyled,\n  HandleInput,\n  HideOut,\n  Info,\n} from \"./styles\";\nimport { format } from \"date-fns\";\nimport { FragmentProvider } from \"contexts/fragment\";\nimport { Editor } from \"components/Editor\";\nimport {\n  HiOutlineBadgeCheck,\n  HiOutlineChartSquareBar,\n  HiOutlineLink,\n  HiOutlineTrash,\n} from \"react-icons/hi\";\nimport { Preview } from \"components/Preview\";\nimport { FragmentDisplayType } from \"types\";\n\nexport const Fragment: FC<{\n  fragment?: FragmentDisplayType;\n\n  onDelete?: (uuid?: string) => any | void;\n  autoFocus?: boolean;\n}> = ({ fragment, onDelete, autoFocus }) => {\n  const {\n    handle,\n    hasBackLinks,\n    onSave,\n    onContentChange,\n    onHandleChange,\n    goToHandlePage,\n    useSpellCheck,\n    setUseSpellCheck,\n    uuid,\n  } = useLogic(fragment, autoFocus);\n\n  return (\n    <FragmentProvider value={fragment || undefined}>\n      <Flex col w=\"100%\">\n        <FragmentStyled>\n          <HideOut>\n            <Flex>\n              <HandleInput\n                value={handle}\n                onChange={(e) => onHandleChange(e.target.value)}\n                spellCheck={false}\n                onBlur={() => onSave()}\n                onClick={goToHandlePage}\n              />\n              <Expander />\n              <div>\n                <Link onClick={() => onDelete?.(uuid || undefined)}>\n                  <HiOutlineTrash />\n                </Link>\n              </div>\n            </Flex>\n          </HideOut>\n          <Editor\n            autoFocus={autoFocus}\n            onChange={onContentChange}\n            initialValue={fragment?.content || \"\"}\n            handle={handle}\n            autoSave\n            spellCheck={useSpellCheck}\n            onSave={onSave}\n          />\n          <HideOut>\n            <Flex style={{ marginTop: 20 }}>\n              <Info>\n                {format(fragment?.createdAt || new Date(), \"dd/MM/yyyy\")}\n              </Info>\n              <Info ml={10}>\n                <Link onClick={() => setUseSpellCheck(!useSpellCheck)}>\n                  <HiOutlineBadgeCheck />\n                </Link>\n              </Info>\n              <Info ml={10}>\n                <Link>\n                  <HiOutlineChartSquareBar />\n                </Link>\n              </Info>\n              <Expander />\n            </Flex>\n          </HideOut>\n        </FragmentStyled>\n        {hasBackLinks && (\n          <BackLinksLine mt={20}>\n            <HiOutlineLink />\n            {fragment?.linkedBy?.map((link) => (\n              <Flex mr={10}>\n                <Preview\n                  handle={link.handle}\n                  previewContent={link.previewContent}\n                >\n                  <RouterLink to={\"/handle/\" + link?.handle}>\n                    <Link>{link?.handle}</Link>\n                  </RouterLink>\n                </Preview>\n              </Flex>\n            ))}\n          </BackLinksLine>\n        )}\n      </Flex>\n    </FragmentProvider>\n  );\n};\n","/home/olup/development/tests/fragments/packages/web/src/components/Fragment/hooks.tsx",["161"],"import { useSaveFragmentMutation } from \"graphql/generated\";\nimport getHumanId from \"human-id\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FragmentDisplayType } from \"types\";\nexport const useLogic = (\n  fragment?: FragmentDisplayType,\n  autoFocus?: boolean\n) => {\n  const navigate = useNavigate();\n\n  const [isDirty, setIsDirty] = useState(false);\n  const [useSpellCheck, setUseSpellCheck] = useState(false);\n\n  const [c, setC] = useState(0);\n  const [w, setW] = useState(0);\n\n  const [handle, setHandle] = useState(\n    fragment?.handle ||\n      getHumanId({\n        separator: \"-\",\n        capitalize: false,\n      })\n  );\n  const [uuid, setUuid] = useState<string | undefined>(\n    fragment?.uuid || undefined\n  );\n  const [content, setContent] = useState<string>(fragment?.content || \"\");\n\n  const count = useCallback((content: string) => {\n    setC(content.length);\n    setW(content.length ? content.split(\" \").length : 0);\n  }, []);\n\n  const [saveFragment, { loading }] = useSaveFragmentMutation();\n\n  const onSave = useCallback(async () => {\n    if ((!uuid && !content) || !isDirty || loading) return;\n    const result = await saveFragment({\n      variables: {\n        fragment: {\n          content,\n          handle,\n          uuid,\n        },\n      },\n    });\n\n    const newUuid = result.data?.fragment?.uuid;\n    if (!!newUuid && newUuid !== uuid) setUuid(newUuid);\n\n    setIsDirty(false);\n    return result;\n  }, [isDirty, uuid, content, handle, loading, saveFragment]);\n\n  const onContentChange = useCallback((newContent: string) => {\n    if (content === newContent) return;\n    setContent(newContent);\n    setIsDirty(true);\n  }, []);\n\n  const onHandleChange = (handle: string) => {\n    setHandle(handle);\n    setIsDirty(true);\n  };\n\n  useEffect(() => {\n    count(content);\n  }, [content, count]);\n\n  const goToHandlePage = (\n    e: React.MouseEvent<HTMLInputElement, MouseEvent>\n  ) => {\n    if (e.ctrlKey || e.metaKey) navigate(\"/handle/\" + e.currentTarget.value);\n  };\n\n  const hasBackLinks = !!fragment?.linkedBy?.length;\n\n  return {\n    hasBackLinks,\n    setHandle,\n    onSave,\n    onContentChange,\n    onHandleChange,\n    goToHandlePage,\n    useSpellCheck,\n    setUseSpellCheck,\n    handle,\n    w,\n    c,\n    uuid,\n  };\n};\n","/home/olup/development/tests/fragments/packages/web/src/components/Fragment/styles.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/components/Preview.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/contexts/fragment.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/components/Editor/index.tsx",["162","163"],"import { createDraft, finishDraft } from \"immer\";\nimport React, { FC, useEffect, useMemo, useRef, useState } from \"react\";\nimport { createEditor, Node, Transforms } from \"slate\";\nimport { Editable, Slate, withReact } from \"slate-react\";\nimport { useDebouncedCallback } from \"use-debounce/lib\";\nimport { SHORTCUTS } from \"./constant\";\nimport { ForbidenHandlesProvider, useForbidenHandlesContext } from \"./context\";\nimport { BlockElement } from \"./decorators/BlockElement\";\nimport { Leaf } from \"./decorators/Leaf\";\nimport { EditorStyled } from \"./styles\";\nimport {\n  decorate,\n  serialize,\n  deserialize,\n  withNormalize,\n  withNestedEditor,\n} from \"./utils\";\n\ntype EditorProps = {\n  initialValue?: string;\n  onChange?: (content: string) => any;\n  onSave?: (content: string) => any;\n  autoSave?: boolean;\n  spellCheck?: boolean;\n  autoFocus?: boolean;\n  onBlur?: (e: any) => any;\n  handle?: string;\n  forbiddenInlineHandles?: string[];\n};\nexport const Editor: FC<EditorProps> = ({\n  onChange: onChangeParent,\n  handle = \"\",\n  initialValue = \"\",\n  autoFocus,\n  autoSave = false,\n  spellCheck = false,\n  onSave,\n  onBlur,\n}) => {\n  const editorRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (autoFocus) editorRef.current?.focus();\n  }, [autoFocus]);\n\n  const [editorState, setEditorState] = useState(serialize(initialValue));\n  const [selectionState, setSelectionState] = useState<any>(null);\n\n  const editor = useMemo(\n    () => withReact(withNestedEditor(withNormalize(createEditor()))),\n    []\n  );\n\n  const debouncedSave = useDebouncedCallback(async () => {\n    onSave?.(deserialize(editorState));\n  }, 1000);\n\n  const handleBlur = (e: any) => {\n    onBlur?.(e);\n    onSave?.(deserialize(editorState));\n  };\n\n  const onChange = (value: any) => {\n    // This method might be crazy ineficient. Might be better to serialize the whole doc JSUT ONCE and the work\n    // by edited line and trigger rerender only on selected event.\n\n    // immerize collection\n    const _value: any[] = createDraft(value);\n    const _selection = createDraft(editor.selection || {});\n\n    let lastCodeFenceIndex: number | null = null;\n\n    _value.forEach((node: any, i: number) => {\n      if (node.type !== \"editor\" && node?.children?.[0]?.text === \"\") {\n        node.type = \"paragraph\";\n      }\n\n      Object.keys(SHORTCUTS).forEach((short) => {\n        if (node.children[0].text?.match(new RegExp(short))) {\n          node.type = SHORTCUTS[short];\n        }\n      });\n\n      // Code fence makes code blocks\n      if (node?.children?.[0]?.text === \"```\") {\n        if (lastCodeFenceIndex) {\n          node.type = \"pre-code-fence\";\n          _value[lastCodeFenceIndex].type = \"pre-code-fence\";\n          _value\n            .slice(lastCodeFenceIndex + 1, i)\n            .forEach((n: any) => (n.type = \"code\"));\n          lastCodeFenceIndex = null;\n        } else {\n          lastCodeFenceIndex = i;\n        }\n      }\n\n      // inline regex is followed by editor\n      if (node.children[0].text?.match(new RegExp(\"^@[a-zA-Z-]+:inline$\"))) {\n        node.type = \"editor-pre-handle\";\n        if (_value[i + 1].type !== \"editor\") {\n          _value.splice(i + 1, 0, {\n            type: \"editor\",\n            preventSerialization: true,\n            handle: node.children[0].text\n              .replace(\"@\", \"\")\n              .replace(\":inline\", \"\"),\n            children: [{ text: \"\" }],\n          });\n        }\n      }\n\n      // editor node must have an inline regex before\n      if (node.type === \"editor\") {\n        if (_value[i - 1].type !== \"editor-pre-handle\") {\n          _value.splice(i, 1);\n        }\n      }\n    });\n\n    // de-immerize collection\n    const editorContent: Node[] = finishDraft(_value);\n    const editorSelection = finishDraft(_selection);\n\n    // we batch our state updates so our children and selection stay in sync\n    setEditorState(editorContent);\n    setSelectionState(editorSelection);\n\n    // fire top editor component onChange event\n    onChangeParent?.(deserialize(editorContent));\n\n    // fire save event\n    if (autoSave) debouncedSave.callback();\n  };\n\n  // serialize live on first mount\n  useEffect(() => {\n    onChange(editorState);\n  }, []);\n\n  // update editor selection with our object\n  useEffect(() => {\n    if (selectionState) {\n      Transforms.setSelection(editor, selectionState);\n    }\n  }, [selectionState]);\n\n  // find forbiden inline handles\n  const forbidenHandles = useForbidenHandlesContext();\n\n  return (\n    <ForbidenHandlesProvider value={[...forbidenHandles, handle]}>\n      <EditorStyled>\n        <Slate\n          editor={editor}\n          value={editorState}\n          onChange={onChange}\n          ref={editorRef}\n        >\n          <Editable\n            renderElement={BlockElement}\n            autoFocus\n            decorate={decorate}\n            renderLeaf={Leaf}\n            onBlur={handleBlur}\n            spellCheck={spellCheck}\n          />\n        </Slate>\n      </EditorStyled>\n    </ForbidenHandlesProvider>\n  );\n};\n","/home/olup/development/tests/fragments/packages/web/src/components/Editor/utils.ts",["164"],"import { Editor, Node, Text } from \"slate\";\nimport { LEAF_REGEX, SHORTCUTS } from \"./constant\";\nexport const serialize = (input: string): Node[] => {\n  return input.split(\"\\n\").map((text) => {\n    let type = \"paragraph\";\n    // Object.keys(SHORTCUTS).forEach((short) => {\n    //   if (text?.match(new RegExp(short))) {\n    //     type = SHORTCUTS[short];\n    //   }\n    // });\n\n    return {\n      type,\n      children: [{ text }],\n    };\n  });\n};\n\nexport const decorate = ([node, path]: any) => {\n  const ranges: any[] = [];\n\n  if (Text.isText(node)) {\n    const { text } = node;\n\n    Object.keys(LEAF_REGEX).forEach((k) => {\n      var re = new RegExp(k, \"gim\");\n\n      let match;\n      while ((match = re.exec(text)) !== null) {\n        const start = match.index;\n        const end = match.index + match[0].length;\n\n        ranges.push({\n          anchor: { path, offset: start },\n          focus: { path, offset: end },\n          type: LEAF_REGEX[k],\n        });\n      }\n    });\n  }\n\n  return ranges;\n};\n\nexport const withNormalize = (editor: Editor) => {\n  const { normalizeNode } = editor;\n\n  editor.normalizeNode = (entry) => {\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n\nexport const withNestedEditor = (editor: Editor) => {\n  const { isVoid } = editor;\n\n  editor.isVoid = (element) => {\n    return element.type === \"editor\" ? true : isVoid(element);\n  };\n\n  return editor;\n};\n\nexport const deserialize = (editorState: Node[]) => {\n  return editorState\n    .filter((n) => {\n      return !n.preventSerialization;\n    })\n    .map((n) => Node.string(n))\n    .join(\"\\n\");\n};\n","/home/olup/development/tests/fragments/packages/web/src/components/Editor/context.ts",["165","166","167"],"import React, { createContext, FC, useReducer } from \"react\";\nimport { useContext } from \"react\";\n\nconst initialState: string[] = [];\nconst ForbidenHandlesContext = createContext(initialState);\nexport const ForbidenHandlesProvider = ForbidenHandlesContext.Provider;\nexport const useForbidenHandlesContext = () =>\n  useContext(ForbidenHandlesContext);\n","/home/olup/development/tests/fragments/packages/web/src/components/Editor/constant.ts",[],"/home/olup/development/tests/fragments/packages/web/src/components/Editor/styles.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/components/Editor/decorators/BlockElement.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/components/Editor/decorators/Leaf.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/components/Editor/decorators/Code.tsx",["168"],"import { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\n\nexport const Code = styled.span<{\n  showAsLink?: boolean;\n}>`\n  background-color: #353535;\n  color: #eee;\n  border-radius: 3px;\n`;\n","/home/olup/development/tests/fragments/packages/web/src/components/Editor/decorators/Tag.tsx",[],"/home/olup/development/tests/fragments/packages/web/src/components/Editor/decorators/Handle.tsx",["169","170","171"],"import React from \"react\";\nimport { css, jsx } from \"@emotion/react\";\nimport { useFragmentContext } from \"contexts/fragment\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled from \"@emotion/styled/macro\";\nimport { Link } from \"components/Link\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { useKeyPress } from \"hooks/useKeyPress\";\nimport { Preview } from \"components/Preview\";\n\nconst HandleStyled = styled.span<{\n  exists?: boolean;\n  inline?: boolean;\n  showAsLink?: boolean;\n}>`\n  background-color: ${(p) => (p.exists ? \"#e2f8ff\" : \"#f1f1f1\")};\n  padding: 0 5px;\n\n  ${(p) =>\n    p.inline &&\n    css`\n      opacity: 0.2;\n      padding-right: 0;\n      background-color: transparent;\n    `}\n\n  ${(p) =>\n    p.showAsLink &&\n    css`\n      cursor: pointer;\n      &:hover {\n        border-bottom: 1px dashed;\n      }\n    `}\n`;\n\nexport const Handle = ({ text: leafText, children, inline, ...props }: any) => {\n  const navigate = useNavigate();\n  const text = leafText?.slice(1) || \"\";\n  const fragment = useFragmentContext();\n  const handlePreview = fragment?.linksTo?.find((l) => l?.handle === text);\n\n  const ctrlPress = useKeyPress(\"Control\");\n  const metaPress = useKeyPress(\"Meta\");\n\n  const showAsLink = ctrlPress || metaPress;\n\n  return (\n    <Preview\n      handle={text}\n      hide={inline}\n      previewContent={handlePreview?.previewContent || undefined}\n    >\n      <HandleStyled\n        {...props}\n        inline={inline}\n        exists={!!handlePreview}\n        showAsLink={showAsLink}\n        onClick={(e) => (e.ctrlKey || e.metaKey) && navigate(\"/handle/\" + text)}\n      >\n        <span>{children}</span>\n      </HandleStyled>\n    </Preview>\n  );\n};\n","/home/olup/development/tests/fragments/packages/web/src/components/InlineEditor.tsx",["172","173"],"import React from \"react\";\nimport {\n  useGetFragmentByHandleQuery,\n  useSaveFragmentMutation,\n} from \"graphql/generated\";\nimport { FC, Fragment } from \"react\";\nimport { Editor } from \"./Editor\";\nimport { useState } from \"react\";\n\nexport const InlineEditor: FC<{ handle?: string }> = ({ handle = \"\" }) => {\n  const { data, loading } = useGetFragmentByHandleQuery({\n    variables: { handle },\n    fetchPolicy: \"cache-and-network\",\n  });\n  const fragment = data?.fragmentByHandle;\n  const [save] = useSaveFragmentMutation();\n\n  const onSave = (content: string) => {\n    if (loading) return;\n    save({\n      variables: {\n        fragment: { uuid: fragment?.uuid, handle, content },\n      },\n    });\n  };\n\n  return (\n    <Editor\n      key={fragment?.uuid}\n      initialValue={fragment?.content || \"\"}\n      onSave={onSave}\n      autoSave\n      handle={handle}\n    />\n  );\n};\n","/home/olup/development/tests/fragments/packages/web/src/hooks/useKeyPress.ts",["174"],"import { useEffect, useState } from \"react\";\n\nexport const useKeyPress = (targetKey: string) => {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  // If pressed key is our target key then set to true\n  function downHandler({ key }: any) {\n    if (key === targetKey) {\n      setKeyPressed(true);\n    }\n  }\n\n  // If released key is our target key then set to false\n  const upHandler = ({ key }: any) => {\n    if (key === targetKey) {\n      setKeyPressed(false);\n    }\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n};\n",{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":11,"column":3,"nodeType":"181","messageId":"182","endLine":11,"endColumn":7},{"ruleId":"179","severity":1,"message":"183","line":18,"column":10,"nodeType":"181","messageId":"182","endLine":18,"endColumn":23},{"ruleId":"179","severity":1,"message":"184","line":19,"column":10,"nodeType":"181","messageId":"182","endLine":19,"endColumn":16},{"ruleId":null,"fatal":true,"severity":2,"message":"185","line":75,"column":29},{"ruleId":"179","severity":1,"message":"186","line":1,"column":8,"nodeType":"181","messageId":"182","endLine":1,"endColumn":13},{"ruleId":"179","severity":1,"message":"180","line":3,"column":10,"nodeType":"181","messageId":"182","endLine":3,"endColumn":14},{"ruleId":"179","severity":1,"message":"187","line":8,"column":3,"nodeType":"181","messageId":"182","endLine":8,"endColumn":30},{"ruleId":"179","severity":1,"message":"188","line":11,"column":17,"nodeType":"181","messageId":"182","endLine":11,"endColumn":28},{"ruleId":"179","severity":1,"message":"189","line":14,"column":7,"nodeType":"181","messageId":"182","endLine":14,"endColumn":19},{"ruleId":"179","severity":1,"message":"190","line":1,"column":22,"nodeType":"181","messageId":"182","endLine":1,"endColumn":34},{"ruleId":"191","severity":1,"message":"192","line":60,"column":6,"nodeType":"193","endLine":60,"endColumn":8,"suggestions":"194"},{"ruleId":"191","severity":1,"message":"195","line":139,"column":6,"nodeType":"193","endLine":139,"endColumn":8,"suggestions":"196"},{"ruleId":"191","severity":1,"message":"197","line":146,"column":6,"nodeType":"193","endLine":146,"endColumn":22,"suggestions":"198"},{"ruleId":"179","severity":1,"message":"199","line":2,"column":22,"nodeType":"181","messageId":"182","endLine":2,"endColumn":31},{"ruleId":"179","severity":1,"message":"186","line":1,"column":8,"nodeType":"181","messageId":"182","endLine":1,"endColumn":13},{"ruleId":"179","severity":1,"message":"200","line":1,"column":32,"nodeType":"181","messageId":"182","endLine":1,"endColumn":34},{"ruleId":"179","severity":1,"message":"201","line":1,"column":36,"nodeType":"181","messageId":"182","endLine":1,"endColumn":46},{"ruleId":"179","severity":1,"message":"202","line":1,"column":10,"nodeType":"181","messageId":"182","endLine":1,"endColumn":13},{"ruleId":"179","severity":1,"message":"203","line":2,"column":15,"nodeType":"181","messageId":"182","endLine":2,"endColumn":18},{"ruleId":"179","severity":1,"message":"180","line":6,"column":10,"nodeType":"181","messageId":"182","endLine":6,"endColumn":14},{"ruleId":"179","severity":1,"message":"204","line":7,"column":18,"nodeType":"181","messageId":"182","endLine":7,"endColumn":28},{"ruleId":"179","severity":1,"message":"205","line":6,"column":14,"nodeType":"181","messageId":"182","endLine":6,"endColumn":22},{"ruleId":"179","severity":1,"message":"206","line":8,"column":10,"nodeType":"181","messageId":"182","endLine":8,"endColumn":18},{"ruleId":"191","severity":1,"message":"207","line":30,"column":6,"nodeType":"193","endLine":30,"endColumn":8,"suggestions":"208"},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'HiOutlinePlus' is defined but never used.","'Button' is defined but never used.","Parsing error: Expression expected.","'React' is defined but never used.","'useGetFragmentByHandleQuery' is defined but never used.","'useCallback' is defined but never used.","'SubTagsBlock' is assigned a value but never used.","'FragmentType' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'content'. Either include it or remove the dependency array.","ArrayExpression",["211"],"React Hook useEffect has missing dependencies: 'editorState' and 'onChange'. Either include them or remove the dependency array.",["212"],"React Hook useEffect has a missing dependency: 'editor'. Either include it or remove the dependency array.",["213"],"'SHORTCUTS' is defined but never used.","'FC' is defined but never used.","'useReducer' is defined but never used.","'css' is defined but never used.","'jsx' is defined but never used.","'RouterLink' is defined but never used.","'Fragment' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.",["214"],"no-global-assign","no-unsafe-negation",{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},"Update the dependencies array to be: [content]",{"range":"223","text":"224"},"Update the dependencies array to be: [editorState, onChange]",{"range":"225","text":"226"},"Update the dependencies array to be: [editor, selectionState]",{"range":"227","text":"228"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"229","text":"230"},[1714,1716],"[content]",[4154,4156],"[editorState, onChange]",[4317,4333],"[editor, selectionState]",[867,869],"[downHandler, upHandler]"]