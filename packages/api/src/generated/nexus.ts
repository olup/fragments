/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import { Context } from './../context'
import { FieldAuthorizeResolver } from 'nexus/dist/plugins/fieldAuthorizePlugin'
import { core } from 'nexus'
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>
    ): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    dateTime<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "DateTime";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  FragmentInput: {
    // input type
    content?: string | null // String
    handle?: string | null // String
    uuid?: string | null // ID
  }
  SearchFragmentInput: {
    // input type
    content?: string | null // String
    handle?: string | null // String
    tags?: string | null // String
  }
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: Date
}

export interface NexusGenObjects {
  Fragment: {
    // root type
    content: string // String!
    createdAt?: NexusGenScalars['DateTime'] | null // DateTime
    handle: string // String!
    previewContent: string // String!
    tags: string[] // [String!]!
    uuid?: string | null // ID
  }
  Mutation: {}
  Query: {}
  User: {
    // root type
    email?: string | null // String
  }
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Fragment: {
    // field return type
    content: string // String!
    createdAt: NexusGenScalars['DateTime'] | null // DateTime
    handle: string // String!
    linkedBy: NexusGenRootTypes['Fragment'][] // [Fragment!]!
    linksTo: NexusGenRootTypes['Fragment'][] // [Fragment!]!
    previewContent: string // String!
    tags: string[] // [String!]!
    uuid: string | null // ID
  }
  Mutation: {
    // field return type
    deleteFragment: boolean // Boolean!
    saveFragment: NexusGenRootTypes['Fragment'] | null // Fragment
  }
  Query: {
    // field return type
    fragmentByHandle: NexusGenRootTypes['Fragment'] | null // Fragment
    fragments: NexusGenRootTypes['Fragment'][] // [Fragment!]!
    me: NexusGenRootTypes['User'] | null // User
    tags: string[] // [String!]!
  }
  User: {
    // field return type
    email: string | null // String
  }
}

export interface NexusGenFieldTypeNames {
  Fragment: {
    // field return type name
    content: 'String'
    createdAt: 'DateTime'
    handle: 'String'
    linkedBy: 'Fragment'
    linksTo: 'Fragment'
    previewContent: 'String'
    tags: 'String'
    uuid: 'ID'
  }
  Mutation: {
    // field return type name
    deleteFragment: 'Boolean'
    saveFragment: 'Fragment'
  }
  Query: {
    // field return type name
    fragmentByHandle: 'Fragment'
    fragments: 'Fragment'
    me: 'User'
    tags: 'String'
  }
  User: {
    // field return type name
    email: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    deleteFragment: {
      // args
      uuid: string // ID!
    }
    saveFragment: {
      // args
      fragment: NexusGenInputs['FragmentInput'] // FragmentInput!
    }
  }
  Query: {
    fragmentByHandle: {
      // args
      handle: string // String!
    }
    fragments: {
      // args
      filter?: NexusGenInputs['SearchFragmentInput'] | null // SearchFragmentInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects

export type NexusGenInputNames = keyof NexusGenInputs

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = keyof NexusGenScalars

export type NexusGenUnionNames = never

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never

export type NexusGenAbstractsUsingStrategyResolveType = never

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  fieldTypeNames: NexusGenFieldTypeNames
  allTypes: NexusGenAllTypes
  typeInterfaces: NexusGenTypeInterfaces
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractTypeMembers: NexusGenAbstractTypeMembers
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType
  features: NexusGenFeaturesConfig
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
